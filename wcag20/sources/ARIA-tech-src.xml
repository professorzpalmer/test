<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE spec SYSTEM "xmlspec.dtd">
<spec status="final" w3c-doctype="wgnote">
	<header>
		<title>ARIA Techniques</title>
		<w3c-designation>WCAG20-ARIA-TECHS</w3c-designation>
		<w3c-doctype>W3C Working Group Note</w3c-doctype>
		<pubdate>
			<day>3</day>
			<month>January</month>
			<year>2012</year>
		</pubdate>
		<publoc>
			<loc href="http://www.w3.org/WAI/GL/WCAG20/sources/ARIA-tech-src.xml">http://www.w3.org/WAI/GL/WCAG20/sources/ARIA-tech-src.xml</loc>
		</publoc>
		<latestloc>
			<loc href="http://www.w3.org/WAI/GL/WCAG20/sources/ARIA-tech-src.xml">http://www.w3.org/WAI/GL/WCAG20/sources/ARIA-tech-src.xml</loc>
		</latestloc>
		<authlist>
			<author>
				<name>Ben Caldwell</name>
				<affiliation>Trace R&amp;D Center </affiliation>
			</author>
		</authlist>
		<status>
			<p/>
		</status>
		<abstract>
			<p>Placeholder - actual abstract text for WCAG20-TECHS is included in the XSLT, techs-merge.xslt. This file contains the XML for general techniques and can be used in conjunction with techs-sample-output.xsl to check that techniques will output correctly. </p>
		</abstract>
		<langusage>
			<language id="en-US"/>
		</langusage>
		<revisiondesc>
			<p/>
		</revisiondesc>
	</header>
	<body>
		<!-- techniques -->
		<div1 id="aria">
			<head>ARIA Techniques</head>
			<div2 id="wai-aria_notes">
				<head>WAI-ARIA Technology Notes</head>
				<p>To improve accessibility, WAI-ARIA provides Web developers with
          the option to add the following semantic information to Web
          pages and rich Internet widgets which are then exposed to the
          browser: </p>
				<ulist>
					<item>
						<p>Roles to describe the type of widget presented, such as
              "menu", "treeitem", "slider" and "progressbar." </p>
					</item>
					<item>
						<p>Roles to describe the structure of the Web page, such as
              headings, regions, search areas and navigation areas. </p>
					</item>
					<item>
						<p>Properties to describe the state widgets are in, such as
              "checked" for a check box, "haspopup" for a menu that
              renders a sub-menu or other popup and "expanded/collapsed"
              for a tree node. </p>
					</item>
					<item>
						<p>Properties to define <loc href="http://www.w3.org/TR/wai-aria/states_and_properties#attrs_liveregions">live regions</loc> of a page that are likely to
              get updates (such as stock quotes), as well as an
              interruption policy for those updates. Assistive
              technologies may present critical updates as soon as they
              are rendered. However, incidental updates are presented only
              after completing the current task. For example, a screen
              reader informs a user of an incidental update only after it
              finishes reading the current paragraph. </p>
					</item>
					<item>
						<p>Properties for drag-and-drop that describe drag sources and
              drop targets </p>
					</item>
					<item>
						<p>A method to provide keyboard navigation for rich internet
              widgets.</p>
					</item>
				</ulist>
				<p>The combination of these features and the structural
          information conveyed by the DOM structure allow authors to
          produce an interoperable solution to assistive technologies.
          (Source: <loc href="http://www.w3.org/WAI/intro/aria">WAI-ARIA Overview</loc>)</p>
				<div3 id="wai-aria_ua_support">
					<head>User Agent Support for WAI-ARIA</head>
					<p>User Agent support for WAI-ARIA varies, but overall support for
            WAI-ARIA is improving. Browsers which support WAI-ARIA map
            WAI-ARIA roles and properties to platform accessibility APIs. </p>
					<ulist>
						<item>
							<p> Firefox 1.5 and Firefox 2.0 partially supports WAI-ARIA,
                  however it requires the use of namespaces, and doesn't
                  support the use of Liveregions.</p>
						</item>
						<item>
							<p> Firefox 3+ contains better support for WAI-ARIA, including
                  Liveregions.</p>
						</item>
						<item>
							<p> IE8 partially supports WAI-ARIA. </p>
						</item>
						<item>
							<p> JAWS 8 and Window-Eyes 5.5+ partially support
                  WAI-ARIA.</p>
						</item>
						<item>
							<p> Jaws 10+ supports WAI-ARIA. </p>
						</item>
						<item>
							<p> FireVox, a self-voicing extension to Firefox, also
                  supports WAI-ARIA via direct DOM access. </p>
						</item>
						<item>
							<p>NVDA partially supports WAI-ARIA.</p>
						</item>
					</ulist>
				</div3>
				<div3 id="wai-aria_accessibility_support">
					<head>Accessibility Support for WAI-ARIA</head>
					<p>Using technologies in an Accessibility Supported way is required for conformance claims. Read more about <loc href="accessibility-support-documenting" linktype="understanding">Accessibility Support</loc>. The WCAG Working Group plans to review which WAI-ARIA techniques are sufficient when Accessible Rich Internet Application specifications reach W3C Recommendation status. Refer to <loc href="http://www.w3.org/WAI/intro/aria">WAI-ARIA Overview</loc> for the latest information on the status of WAI-ARIA.</p>
				</div3>
			</div2>
			<technique id="ARIA1">
				<short-name>Using the aria-describedby property to provide a descriptive label for user interface controls</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="content-structure-separation-programmatic" relationship="sufficient"/>
					<success-criterion idref="minimize-error-cues" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
					</ua-issue>
					<ua-issue name="Internet Explorer" version="8">
						<p>IE 8 only supports <prop>aria-labelledby</prop> with a single id value and it partially supports <prop>aria-describedby</prop>.</p>
					</ua-issue>
				</ua-issues>
				<description>
					<p>The purpose of this technique is to demonstrate how to use the   WAI-ARIA <loc href="http://www.w3.org/TR/wai-aria/states_and_properties#aria-describedby">aria-describedby</loc> property to provide programmatically   determined, descriptive information about a user interface element. The <att>aria-describedby</att> property may be used to attach descriptive information to one or more elements through the use of an id reference list. The id reference list contains one or more unique element ids. </p>
					<p>Refer to <loc href="http://www.w3.org/TR/wai-aria-primer/#ariahtml">Supporting ARIA in XHTML and HTML 4.01</loc> for information on how to provide WAI-ARIA States and Properties with XHTML and HTML. WAI-ARIA States and Properties is compatible with other languages as well; refer to documentation in those languages. </p>
					<note>
						<p>The <att>aria-describedby</att> property is not designed to reference descriptions on an external resource — since it is an ID, it must reference an element in the same DOM document.</p>
					</note>
				</description>
				<examples>
					<eg-group>
						<head>Using aria-describedby property to describe a Close button's action</head>
						<description>
							<p>A button that functions as a 'close' button on a dialog is described elsewhere in the document. The <att>aria-describedby</att> property is used to associate the description with the link.</p>
						<codeblock xml:space="preserve"><![CDATA[<button aria-label="Close" aria-describedby="descriptionClose" 
    onclick="myDialog.close()">X</button>

...

<div id="descriptionClose">Closing this window will discard any information entered and 
return you back to the main page</div>
]]></codeblock>
                            <p>Working example: <loc href="describedby-close.html" linktype="examples">Example 1</loc></p>
                            </description>
                        </eg-group>
					<eg-group>
						<head>Using aria-describedby to associate instructions with form fields</head>
						<description>
							<p>Sample form field using <att>aria-describedby</att> to associate instructions with form fields while there is a form label.</p>
						<codeblock xml:space="preserve"><![CDATA[ <form> 
<label for="fname">First name</label>  
<input name="" type="text" id="fname" aria-describedby="int2"> 
<p id="int2">A  bit of instructions for this field linked with aria-describedby. </p>
</form>
]]></codeblock>
                        </description>
					</eg-group>
					<eg-group>
						<head>Using aria-describedby property to provide more detailed information about the button</head>
						<description>
						<codeblock xml:space="preserve"><![CDATA[<p><span id="fontDesc">Select the font faces and sizes to be used on this page</span>
 <button id="fontB" onclick="doAction('Fonts');" aria-describedby="fontDesc"> Fonts </button>
</p>
<p><span id="colorDesc">Select the colors to be used on this page</span>
 <button id="colorB" onclick="doAction('Colors');" aria-describedby="colorDesc"> Colors </button>
</p>
<p><span id="customDesc">Customize the layout and styles used on this page</span>
 <button id="customB" onclick="doAction('Customize');" aria-describedby="customDesc"> Customize </button>
</p>
]]></codeblock>
                        </description>
					</eg-group>
					<eg-group>
						<head>Using aria-describedby to associate tooltips with form fields</head>
                            <description>
                                <p>The following code snippet from the <loc href="http://test.cita.uiuc.edu/aria/tooltip/tooltip1.php">iCITA</loc> site shows how to use <att>aria-describedby</att> and the onfocus="tooltipShow() function to display the tooltip when focus is placed on an element.</p>
                            <codeblock xml:space="preserve"><![CDATA[<html lang="en-us"">  
<head>    
   <title>inline: Tooltip Example 1</title>      
   <link rel="stylesheet" href="css/tooltip1_inline.css"  type="text/css">    
   <script type="text/javascript" src="js/tooltip1_inline.js"></script>    
   <script type="text/javascript" src="../js/widgets_inline.js"></script>
   <script type="text/javascript" src="../js/globals.js"></script>          
   <link rel="icon" href="http://www.cites.uiuc.edu/favicon.ico" type="image/x-icon">    
   <link rel="shortcut icon" href="http://www.cites.uiuc.edu/favicon.ico" type="image/x-icon"> 
</head>
   ...   

   <body onload="initApp()">

   <div id="container">

   <h1>Tooltip Example 1</h1>
     <h2>Create Account</h2>
   <div class="text">
   <label for="first">First Name:</label> 

   <input type="text"  id="first" name="first" size="20" 
          onmouseover="tooltipShow(event, this, 'tp1');"     
          onfocus="tooltipShow(event, this,  'tp1');" 
          aria-describedby="tp1"  		 
          aria-required="false"/>

   <div id="tp1" role="tooltip" aria-hidden="true">Your first name is optional. </div>    
   </div>
]]></codeblock>
                        </description>
					</eg-group>
					<eg-group>
						<head>XHTML</head>
						<description>
							<p>This example is coded in XHTML with a MIME type of   application:xhtml+xml. This MIME type is not supported in all user   agents. The aria-describedby property is added directly   into the XHTML markup, and no additional scripting is needed. </p>
						</description>
						<code xml:space="preserve"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1
 For Accessible Adaptable Applications//EN"
  "http://www.w3.org/WAI/ARIA/schemata/xhtml-aria-1.dtd">
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"
 <head>
 <meta http-equiv="content-type" content="application:xhtml+xml; charset=utf-8" />
 <title>Demonstration of aria-describedby property</title>
 <style type="text/css">
 div.form p { clear:left; margin: 0.3em 0;}
 .left {
   float:left;
   width:400px;
 }
 .right {
   width:100px;
   text-align:right;
 }
 </style>
 </head>
 <body>
 <p>The buttons on this page use the Accessible Rich Internet Applications aria-describedby property 
 to provide more detailed information about the button action</p>
 <div class="form">
 <p><span class="left" id="fontDesc" >Select the font faces and sizes to be used on this page</span>
 <span class="right"><button id="fontB" onclick="doAction('Fonts');" aria-describedby="fontDesc">
 Fonts </button></span></p>
 <p><span class="left" id="colorDesc" >Select the colors to be used on this page</span>
 <span class="right"><button id="colorB" onclick="doAction('Colors');" aria-describedby="colorDesc">
 Colors </button></span></p>
 <p><span class="left" id="customDesc" >Customize the layout and styles used on this page</span>
 <span class="right"><button id="customB" onclick="doAction('Customize');" aria-describedby="customDesc"> 
 Customize </button></span></p>
 </div>
 </body>
 </html>
]]></code>
					</eg-group>
					<eg-group>
						<head>HTML</head>
						<description>
							<p>This example uses scripting to add an aria-describedby   property to buttons on a page. The example creates a buttonIds array   variable to hold the ids of the elements that contain description text.   The setDescribedBy() function is called from the onload   event of the window object. </p>
							<p>The setDescribedBy() function loops through all of   the button elements and calls setAttribute() on each button   element to set the aria-describedby property. Each   button's aria-describedby property is set to the id   of the element containing its descriptive text. </p>
							<p>Using a user agent and/or assistive technology which supports   WAI-ARIA, the description will be provided when the user interface   controls receive focus. </p>
						</description>
						<code xml:space="preserve"><![CDATA[ <head>
 <meta http-equiv="content-type" content="text/xhtml; charset=utf-8" />
 <title>Demonstration of aria-describedby property</title>
 <style type="text/css">
 div.form p { clear:left; margin: 0.3em 0;}
.left {
  float:left;
  width:400px;
}
.right {
	width:100px;
	text-align:right;
}
 </style>
 <script type="text/javascript">
 //<![CDATA[

 // array entries for each button on the page that associates the button id 
 // with the id of the element containing the text which describes the button
 var buttonIds = new Array();
 buttonIds["fontB"]= "fontDesc";
 buttonIds["colorB"] = "colorDesc";
 buttonIds["customB"] = "customDesc";

 // function that is run after the page has loaded to set the aria-describedBy
 // property on each of the elements referenced by the array of id values
 function setDescribedBy(){
	if (buttonIds){
		var buttons = document.getElementsByTagName("button");
		if (buttons){
			var buttonId;
			for(var i=0; i<buttons.length; i++){
				buttonId = buttons[i].id;
				if (buttonId && buttonIds[buttonId]){
					buttons[i].setAttribute("aria-describedby", buttonIds[buttonId]);
				}
			}
		}
	}
 }

 // simulated action function - currently just displays an alert
 function doAction(theAction){
	alert("Perform the " + theAction + " action");
 }

 window.onload=setDescribedBy;

//]]]]><![CDATA[>
 </script>
 </head>
 <body>
 <p>The buttons on this page use the Accessible Rich Internet Applications 
 aria-describedby property to provide more detailed information 
 about the button action.
 </p>
 <div class="form">
 <p><span class="left" id="fontDesc" >Select the font faces and sizes to be used on this page</span>
    <span class="right"><button id="fontB" onclick="doAction('Fonts');"> Fonts </button></span>
 </p>
 <p><span class="left" id="colorDesc" >Select the colors to be used on this page</span>
    <span class="right"><button id="colorB" onclick="doAction('Colors');"> Colors </button></span>
 </p>
 <p><span class="left" id="customDesc" >Customize the layout and styles used on this page</span>
    <span class="right"><button id="customB" onclick="doAction('Customize');"> Customize </button></span>
 </p>
 </div>
 </body>
]]></code>
					</eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
							<item>
								<p><loc href="http://www.w3.org/WAI/intro/aria">WAI-ARIA   Overview</loc></p>
							</item>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
                            <item>
								<p> <loc
									href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide: Accessible Name and Description Calculation</loc> </p>
							</item>
							<item>
								<p><loc href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute">Using the aria-describedby attribute (MDN)</loc></p>
							</item>
							<item>
								<p><loc href="http://www.w3.org/TR/aria-in-html/">Using WAI-ARIA in HTML</loc> </p>
							</item>
						</ulist>
					</see-also>
				</resources>
				<related-techniques>
					<relatedtech idref="ARIA2"/>
					<relatedtech idref="ARIA7"/>
				</related-techniques>
				<tests>
					<procedure>
						<olist>
							<item>
								<p>Check that there is a user interface control having an <att>aria-describedby</att> attribute that references one or more elements via unique id.</p>
							</item>
							<item>
								<p> Check that the referenced element or elements provide   additional information about the user interface control. </p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>Checks #1 and #2 are true. </p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA2">
				<short-name>Identifying a required field with the aria-required property</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="content-structure-separation-programmatic" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
					</ua-issue>
				</ua-issues>
				<description>
					<p>The objective of this technique is to indicate in a programmatically determined way that the completion of a user input field is mandatory for successful submission of a form when there is a visual cue to this effect.</p>
                    <p>The fact that the element is required is often visually presented (via a text or non-text symbol, or text indicating input is required or color / styling) but this is not programmatically determinable as part of the field's name.</p>
                        <p>The WAI-ARIA <prop>aria-required</prop> property indicates that user input is required before submission. The <prop>aria-required</prop> property can have values of <attval>true</attval> or <attval>false</attval>. For example, if a user must fill in an address field, then <att>aria-required</att> is set to <attval>true</attval>.</p>
                        <note>						
						<p>Note: Use of <code>aria-required="true"</code> might be beneficial even when an asterisk or other text symbol is programmatically associated with the field as it may reinforce its <prop>required</prop> property for some assistive technology users.</p>
						<p>The fact that the element is required is often visually   presented (such as a sign or symbol after the control). Using the <prop>aria-required</prop> property in addition to the visual presentation makes it much easier   for user agents to pass on this important information to the user in a   user agent-specific manner.  Refer to <loc href="http://www.w3.org/TR/wai-aria-primer/#ariahtml">Supporting   ARIA in XHTML and HTML 4.01</loc> for information on how to provide   WAI-ARIA States and Properties with XHTML and HTML. WAI-ARIA States and   Properties is compatible with other languages as well; refer to   documentation in those languages. </p>
						<p>At this time, WAI-ARIA is a Working Draft. This technique   is provided as an advisory technique for organizations that wish to   experiment with achieving WCAG conformance using WAI-ARIA. When WAI-ARIA   becomes a formal specification and is supported in user agents, it is   anticipated that this technique will become a sufficient technique. </p>
					   </note>
				</description>
				<examples>
					<eg-group>
						<head/>
						<description>
							<p>The <prop>required</prop> property is indicated by an asterisk placed next to the label element:</p>
						<codeblock xml:space="preserve"><![CDATA[
<form action="#" method="post"  id="login1" onsubmit="return errorCheck1()">
  <p>Note: [*]denotes mandatory field</p> 
  <p>
    <label for="usrname">Login name: </label> 
    <input type="text" name="usrname" id="usrname" aria-required="true"/>[*]
  </p>
  <p>
    <label for="pwd">Password</label> 
    <input type="password" name="pwd" id="pwd" size="12" aria-required="true" />[*]
  </p> 
  <p>
    <input type="submit" value="Login" id="next_btn" name="next_btn"/>
  </p>
 
</form>		]]></codeblock>
                        </description>
					</eg-group>
					<eg-group>
						<head/>
						<description>
							<p>The <prop>required</prop> property is indicated by the word "required" placed next to the <el>label</el> element:</p>
						<codeblock xml:space="preserve"><![CDATA[<head>
<form action="#" method="post" id="step1" onsubmit="return errorCheck2()">
  <p>
    <label for="fname">First name: </label> 
    <input type="text" id="fname" aria-required="true" />
    [required]
  </p>
  <p>
    <label for="mname">Middle name: </label> 
    <input type="text" id="mname" />
  </p>
  <p>
    <label for="lname">Last name: </label> 
    <input type="text" id="lname" aria-required="true" />
    [required]
  </p>
  <p>
    <label for="email">Email address: </label> 
    <input type="text" id="email" aria-required="true" />
    [required]
  </p>
  <p>
    <label for="zip_post">Zip / Postal code: </label> 
    <input type="text" id="zip_post" size="6" aria-required="true" />
    [required]
  </p>
  <p>
    <input type="submit" value="Next Step" id="step_btn" name="step_btn" />
  </p>
</form> ]]></codeblock>
                        </description>
					</eg-group>
					<eg-group>
						<head/>
						<description>
							<p>Required fields are indicated by a red border around the fields and a star icon rendered via CSS using <code role="css">content:before</code>. This example also uses custom radio buttons with <code>role=radio</code> but the script to make the span actually work like radio buttons is not included in this example. The CSS properties are available below the form.
</p>
						<codeblock xml:space="preserve"><![CDATA[<head>
<form action="#" method="post" id="alerts1">
  <label for="acctnum" data-required="true">Account Number</label>
  <input size="12" type="text"
      aria-required="true" name="acctnum" />

 <p id="radio_label">Please send an alert when balance exceeds $3,000.</p>
 
 <ul  id="rg" role="radiogroup" aria-labelledby="radio_label">
    <li id="rb1" role="radio" aria-required="true">Yes</li>
    <li id="rb2" role="radio" aria-required="true">No</li>
 </ul>	
</form> 
 ]]></codeblock>
						<codeblock xml:space="preserve"><![CDATA[<head>
[aria-required=true] {
  border: red thin solid;
} 
[aria-required=true]:before {
  content: url('/iconStar.gif');
}

[data-required=true]:after {
  content: url('/iconStar.gif');
}
 ]]></codeblock>                            
                        </description>
					</eg-group>
					<eg-group>
						<head>A required text input field in XHTML</head>
						<description>
							<p>The following example shows an XHTML document using the <prop>aria-required</prop> property to indicate that a form field must be submitted. The mandatory   nature of the field is also indicated in the label as a fallback for   user agents that do not support WAI-ARIA. </p>
						</description>
						<code xml:space="preserve"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 
    For Accessible Adaptable Applications//EN"
  "http://www.w3.org/WAI/ARIA/schemata/xhtml-aria-1.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" 
          xml:lang="en">
  <head>
    <title>Required Input</title>
  </head>
  <body>
    <h1>Required Input</h1>
    <p>The following form input field must be completed by the user
    before the form can be submitted.</p>
    <form action="http://example.com/submit">
      <p>
        <label for="test">Test (required)</label>
        <input name="ariaexample" id="example" aria-required="true" aria-label="Test"/>
      </p>
      <p>
        <input type="submit" value="Submit" />
      </p>
    </form>
  </body>
</html>
		]]></code>
					</eg-group>
					<eg-group>
						<head>Adding <prop>aria-required</prop> property via script</head>
						<description>
							<p>This example uses scripting to add the <prop>aria-required</prop> property to a form element. The required property is assigned using the <function>setAttribute()</function>   API. </p>
							<p>The array variable, <var>requiredIds</var>, is created with the   ids of the elements which need to be marked as required. The <function>setRequired()</function>   function is called from the <event>onload</event> event of the <obj>window</obj>   object. </p>
							<p>The <function>setRequired()</function> function loops through all of the   ids provided, retrieves the element and assigns the <prop>aria-required</prop> property of true using the setAttribute() function. </p>
							<p>When this page is accessed using Firefox 3.0 or later and a   screen reader that supports WAI-ARIA, the screen reader will speak   "required" when reading the label for the input fields. </p>
						</description>
						<code xml:space="preserve"><![CDATA[<head>
 <script type="text/javascript">
 //<![CDATA[
 
 // array or ids on the required fields on this page
 var requiredIds = new Array( "firstName", "lastName");
 
 // function that is run after the page has loaded to set the aria-required property on each of the 
 //elements in requiredIds array of id values
 function setRequired(){
 	if (requiredIds){
 		var field;
 		for (var i = 0; i< requiredIds.length; i++){
 			field = document.getElementById(requiredIds[i]);
 			field.setAttribute("aria-required", "true");
 		}
 	}
 }
 window.onload=setRequired;
//]]]]><![CDATA[>
 </script>
 </head>
 <body>
 <p>Please enter the following data.  Required fields have been programmatically identified 
 as required and  marked with an asterisk (*) following the field label.</p>
 <form action="submit.php">
 <p>
 <label for="firstName">First Name *: </label><input type="text" name="firstName" 
    id="firstName" value="" />
 <label for="lastName">Last Name *: </label><input type="text" name="lastName" 
    id="lastName"  value="" />
 </p>
 </form>
 </body>
]]></code>
					</eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
							<item>
								<p>
									<loc href="http://www.w3.org/WAI/intro/aria">WAI-ARIA   Overview</loc>
								</p>
							</item>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
                            <item>
								<p> <loc
									href="http://www.deque.com/blog/aria-requiredtrue-wcag-2-compliance-practice/">Aria-required=true: WCAG 2 Compliance versus Best Practice</loc></p>
							</item>
						</ulist>
					</see-also>
				</resources>
				<!--
				<related-techniques>
					<relatedtech idref="ARIA3"/>
				</related-techniques>
				-->
				<tests>
					<procedure>
                        <p>For each element where the <att>aria-required</att> attribute is present:</p>
                        <olist>
							<item>
								<p>Check whether the value of the <att>aria-required</att> attribute is the correct required state of the user interface component.</p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>Check #1 is true</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<!-- removed until UA support improves
			<technique id="ARIA3">
				<short-name>Identifying valid range information with the aria-valuemin and aria-valuemax properties</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
					<ednote>
						<edtext>This technique will be applicable when  Accessible Rich Internet Application specifications reach W3C recommendation status.</edtext>
					</ednote>
				</applicability>
				<applies-to>
					<success-criterion idref="minimize-error-suggestions" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
					</ua-issue>
				</ua-issues>
				<description>
					<p>The objective of this technique is to provide information about the   allowable range of an entry field in a programmatically determinable   way. The WAI-ARIA <loc href="http://www.w3.org/TR/wai-aria/states_and_properties#aria-valuemin">
							<prop>aria-valuemin</prop>
						</loc> and <loc href="http://www.w3.org/TR/wai-aria/states_and_properties#aria-valuemax">
							<prop>aria-valuemax</prop>
						</loc> states provide the minimum and maximum   (respectively) values that may be provided by the user. Some user   agents will not permit users to enter values outside that range, or will   generate a validation error if users do so. The developer is still   responsible for providing validation that the value is within the range. </p>
					<p>Refer to <loc href="http://www.w3.org/TR/wai-aria-primer/#ariahtml">Supporting   ARIA in XHTML and HTML 4.01</loc> for information on how to provide   WAI-ARIA States and Properties with XHTML and HTML. WAI-ARIA States and   Properties is compatible with other languages as well; refer to   documentation in those languages. </p>
					<note>
						<p> At this time, WAI-ARIA is a Working Draft. This technique   is provided as an advisory technique for organizations that wish to   experiment with achieving WCAG conformance using WAI-ARIA. When WAI-ARIA   becomes a formal specification and is supported in user agents, it is   anticipated that this technique will become a sufficient technique. </p>
					</note>
				</description>
				<examples>
					<eg-group>
						<head>A spinner control that provides values between 1 and 100</head>
						<description>
							<p>The following spin button allows users to enter a number between 1 and 100 (inclusive).</p>
						</description>
						<code xml:space="preserve"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1 
  For Accessible Adaptable Applications//EN" "http://www.w3.org/WAI/ARIA/schemata/xhtml-aria-1.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" 
  xml:lang="en">
<head>
  <title>Spin Button</title>
</head>
<body>
  <h1>Spin Button</h1>
  <p>Spin button allows users to enter a number between 1 and 100. It is 
    implemented as a text input, to which user agents that do not support 
    ARIA roles fall back.</p>
  <form action="http://example.com/submit">
    <p><label for="test">Enter a number between 1 and 100</label>
    <input name="test" id="test" role="spinbutton" 
      aria-valuemin="1" aria-valuemax="100" /></p>
    <p><input type="submit" value="Submit" /></p>
  </form>
</body>
</html>]]></code>
					</eg-group>
				</examples>
				<resources>
					<see-also>
						<ulist>
							<item>
								<p>
									<loc href="http://www.w3.org/WAI/intro/aria">WAI-ARIA   Overview</loc>
								</p>
							</item>
						</ulist>
					</see-also>
				</resources>
				<related-techniques>
					<relatedtech idref="ARIA2"/>
				</related-techniques>
				<tests>
					<procedure>
						<olist>
							<item>
								<p> Access a page with form fields that require data in a certain   range, using a user agent that supports the Accessible Rich Internet   Applications specification. </p>
							</item>
							<item>
								<p> Provide information that is outside the allowable range, and   attempt to submit the form. </p>
							</item>
							<item>
								<p> Check that the user agent notifies the user of the invalid   data. </p>
							</item>
							<item>
								<p> Provide information that is inside the allowable range, and   attempt to submit the form. </p>
							</item>
							<item>
								<p> Check that the user agent accepts the data and allows the   submit to proceed. </p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#3 and #5 are true</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			-->
			<technique id="ARIA4">
				<short-name>Using a WAI-ARIA role to expose the role of a user interface component</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>.</p>
				</applicability>
				<applies-to>
					<success-criterion idref="ensure-compat-rsv" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
					</ua-issue>
				</ua-issues>
				<description>
					<p>The objective of this technique is to define the role of an element using the <att>role</att> attribute with one of the non-abstract values defined in the <loc href="http://www.w3.org/TR/wai-aria/roles#role_definitions">WAI-ARIA Definition of Roles</loc>. The WAI-ARIA specification provides an informative description of each role, how it relates to other roles, and the states and properties for each role. When rich internet applications define new user interface widgets, exposing the roles enables users to understand the widget and how to interact with it.</p>
				</description>
				<examples>
					<eg-group>
						<head>A simple toolbar</head>
						<description>
							<p>The WAI-ARIA Authoring Practices document <loc href="http://www.w3.org/TR/2010/WD-wai-aria-practices-20100916/#accessiblewidget">demonstrates a toolbar containing three buttons</loc>. The <el>div</el> element has a role of "toolbar", and the <el>img</el> elements have "button" roles:</p>
						<codeblock xml:space="preserve"><![CDATA[
    <div role="toolbar"
      tabindex="0" 
      id="customToolbar" 
      onkeydown="return optionKeyEvent(event);"
      onkeypress="return optionKeyEvent(event);"
      onclick="return optionClickEvent(event);"
      onblur="hideFocus()"
      onfocus="showFocus()"
      > 
      <img src="img/btn1.gif" 
           role="button" 
           tabindex="-1" 
           alt="Home" 
           id="b1" 
           title="Home">
      <img src="img/btn2.gif" 
           role="button" 
           tabindex="-1" 
           alt="Refresh" 
           id="b2" 
           title="Refresh">
     <img src="img/btn3.gif" 
           role="button" 
           tabindex="-1" 
           alt="Help" 
           id="b3" 
           title="Help"> 
 </div>  
                        ]]></codeblock>
          <p>The AEGIS project website includes a <loc href="http://access.aol.com/aegis/#goto_menubar">working example of a menubar</loc>.</p>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>A Tree Widget</head>
						<description>
							<p>The WAI-ARIA Primer <loc href="http://www.w3.org/TR/wai-aria-primer/#exampletree">demonstrates a tree widget</loc>. Note the use of the roles "tree", "treeitem", and "group" to identify the tree and its structure. Here is a simplified excerpt from the code:</p>
						<codeblock xml:space="preserve"><![CDATA[
<ul role="tree" tabindex="0">
  <li role="treeitem">Birds</li>
  <li role="treeitem">Cats
    <ul role="group">
      <li role="treeitem">Siamese</li>
      <li role="treeitem">Tabby</li>
    </ul>
  </li>
  <li role="treeitem">Dogs
    <ul role="group">
      <li role="treeitem">Small Breeds
        <ul role="group">
          <li role="treeitem">Chihuahua</li>
          <li role="treeitem">Italian Greyhound</li>
          <li role="treeitem">Japanese Chin</li>
        </ul>
      </li>
      <li role="treeitem"">Medium Breeds
        <ul role="group">
          <li role="treeitem">Beagle</li>
          <li role="treeitem">Cocker Spaniel</li>
          <li role="treeitem">Pit Bull</li>
        </ul>
      </li>
      <li role="treeitem">Large Breeds
        <ul role="group">
          <li role="treeitem">Afghan</li>
          <li role="treeitem">Great Dane</li>
          <li role="treeitem">Mastiff</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>
]]></codeblock>
                            <p>The AEGIS project website includes a <loc href="http://access.aol.com/aegis/#goto_tree">working example of a tree</loc>.</p>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
                            <item><p><loc href="http://www.w3.org/TR/wai-aria/usage#usage_intro">Accessible Rich Internet Applications (WAI-ARIA) 1.0, Roles</loc></p>
                            </item>
                            <item><p><loc href="http://www.w3.org/TR/wai-aria/roles">Accessible Rich Internet Applications (WAI-ARIA) 1.0, The Roles Model</loc></p>
                            </item>
                            <item><p><loc href="http://www.w3.org/TR/html-aapi/#html-element-to-accessibility-api-role-mapping-matrix">HTML to Platform Accessibility APIs Implementation Guide: HTML Element to Accessibility API Role Mapping Matrix</loc></p>
                            </item>
                            <item><p><loc href="http://www.w3.org/TR/wai-aria-primer/">WAI-ARIA 1.0 Primer</loc></p>
                            </item>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
							<item>
								<p><loc href="http://www.w3.org/TR/aria-in-html/">Using WAI-ARIA in HTML</loc> </p>
							</item>
						</ulist>
					</see-also>
				</resources>
<related-techniques>
				</related-techniques>
				<tests>
					<procedure>
                        <p>For a user interface component using the <att>role</att> attribute:</p>
						<olist>
							<item>
								<p>Check that the value of the role attribute is one of the non-abstract roles from the values defined in the WAI-ARIA specification.</p>
							</item>
							<item>
								<p>Check that the characteristics of the user interface component are described by the role.</p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 and #2 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA5">
				<short-name>Using WAI-ARIA state and property attributes to expose the state of a user interface component</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="ensure-compat-rsv" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
					</ua-issue>
				</ua-issues>
				<description>
					<p>The objective of this technique is to use <loc href="http://www.w3.org/TR/wai-aria/states_and_properties">WAI-ARIA state and property attributes</loc> to expose the state, properties and values of a user interface component so that they can be read and set by assistive technology, and so that assistive technology is notified of changes to these values. The WAI-ARIA specification provides a normative description of each attribute, and the role of the user interface elements that they support. When rich internet applications define new user interface widgets, exposing the state and property attributes enables users to understand the widget and how to interact with it.</p>
				</description>
				<examples>
					<eg-group>
						<head>A toggle button</head>
						<description>
							<p>A widget with role <att>button</att> acts as a toggle button when it implements the attribute <att>aria-pressed</att>. When <att>aria-pressed</att> is true, the button is in a "pressed" state. When <att>aria-pressed</att> is false, it is not pressed. If the attribute is not present, the button is a simple command button.</p>
                            <p>The following snippet from The Open Ajax Accessibility Examples, Example 38, shows WAI-ARIA mark-up for a toggle button that selects bold text:</p>
						<codeblock xml:space="preserve"><![CDATA[
  <li id="bold1"  
    class="toggleButton"
    role="button"
    tabindex="0"
    aria-pressed="false"
    aria-labelledby="bold_label"
    aria-controls="text1">
    <img src="http://www.oaa-accessibility.org/media/examples/images/button-bold.png" alt="bold text" align="middle">
</li>
]]></codeblock>
                            <p>The <el>li</el> element has a role of "button" and an "aria-pressed" attribute. The following excerpt from the Javascript for this example updates the value of the "aria-pressed" attribute:</p>
                            <codeblock xml:space="preserve"><![CDATA[                   
                             /**
   * togglePressed() toggles the aria-pressed atribute between true or false
   *
   * @param ( id object) button to be operated on
   *
   * @return N/A
   */
  function togglePressed(id) {
  
    // reverse the aria-pressed state
    if ($(id).attr('aria-pressed') == 'true') {
      $(id).attr('aria-pressed', 'false');
    }
    else {
      $(id).attr('aria-pressed', 'true');
    }
  }
                            ]]></codeblock>
<p>This button is available as part of the <loc href="http://www.oaa-accessibility.org/examplep/toolbar1/">working example of Example 38 - Toolbar using inline images for visual state</loc>, on the OpenAjax Alliance site.</p>
                        </description>
                    </eg-group>
                    
					<eg-group>
						<head>A slider</head>
						<description>
							<p>A widget with role <att>slider</att> lets a user select a value from within a given range. The slider represents the current value and the range of possible values via the size of the slider and the position of the handle. These properties of the slider are represented by the attributes <att>aria-valuemin</att>, <att>aria-valuemax</att>, and <att>aria-valuenow</att>.</p>

<p>The following snippet from The Open Ajax Accessibility Examples, Example 32, shows WAI-ARIA mark-up for a slider created in Javascript. Note that the javascript sets the attributes aria-valuemin, aria-valuemax, and aria-valuenow:</p>
						<codeblock xml:space="preserve"><![CDATA[   var handle = '<img id="' + id + '" class="' + (this.vert == true ? 'v':'h') +'sliderHandle" ' +
    'src="http://www.oaa-accessibility.org/media/examples/images/slider_' + (this.vert == true ? 'v':'h') + '.png" ' + 'role="slider" ' +
    'aria-valuemin="' + this.min +
    '" aria-valuemax="' + this.max +
    '" aria-valuenow="' + (val == undefined ? this.min : val) +
           '" aria-labelledby="' + label +
           '" aria-controls="' + controls + '" tabindex="0"></img>';]]></codeblock>
                            <p>The following excerpt from the Javascript for this example updates the value of the "aria-valuenow" attribute when the value of the slider handle is changed:</p>
						<codeblock xml:space="preserve"><![CDATA[ slider.prototype.positionHandle = function($handle, val) {
    ...
   // Set the aria-valuenow position of the handle
  $handle.attr('aria-valuenow', val);
   ...
  }
]]></codeblock>
                            <p>This slider is available as part of the <loc href="http://oaa-accessibility.org/example/32/">working example of Example 32 - Slider</loc>, on the OpenAjax Alliance site.</p>
                            </description>
                    </eg-group>
                    
                </examples>
				<resources>
					<see-also>
						<ulist>
                            <item><p><loc href="http://www.w3.org/TR/wai-aria/usage#usage_intro">Accessible Rich Internet Applications (WAI-ARIA) 1.0, Roles</loc></p>
                            </item>
                            <item><p><loc href="http://www.w3.org/TR/wai-aria/roles">Accessible Rich Internet Applications (WAI-ARIA) 1.0, The Roles Model</loc></p>
                            </item>
                            <item>
                                <p><loc href="http://www.w3.org/TR/wai-aria/states_and_properties">Accessible Rich Internet Applications (WAI-ARIA) 1.0, Supported States and Properties</loc></p>
                            </item>
                            <item><p><loc href="http://www.w3.org/TR/html-aapi/#html-element-to-accessibility-api-role-mapping-matrix">HTML to Platform Accessibility APIs Implementation Guide: HTML Element to Accessibility API Role Mapping Matrix</loc></p>
                            </item>
                            <item><p><loc href="http://www.w3.org/TR/wai-aria-primer/">WAI-ARIA 1.0 Primer</loc></p>
                            </item>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
							<item>
								<p><loc href="http://www.w3.org/TR/aria-in-html/">Using WAI-ARIA in HTML</loc> </p>
							</item>
						</ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="ARIA4"/>
					<relatedtech idref="H91"/>
				</related-techniques>
				<tests>
					<procedure>
                        <p><loc href="http://www.w3.org/TR/wai-aria/roles#roles_categorization">The WAI-ARIA specification, Section 5.3, Categorization of Roles</loc> defines the required and inherited states and properties for each role.</p>
                        <p>For a user interface component using the WAI-ARIA role attribute:</p>
						<olist>
							<item>
								<p>Check that the required states and properties for the role are present.</p>
							</item>
							<item>
								<p>Check that no WAI-ARIA states or properties that are neither required, supported, nor inherited are present.</p>
							</item>
							<item>
								<p>Check that the state and property values are updated to reflect the current state when the user interface component changes state.</p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1, #2, and #3 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA6">
				<short-name>Using aria-label to provide labels for objects</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="text-equiv-all" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                    <ulist><item><p>Jaws V.11 and greater has complete support.
</p></item><item><p>ChromeVox V.1 and greater has complete support 
</p></item><item><p>VoiceOver V.3 and greater supports
</p></item><item><p>NVDA 2 supports Aria Describedby
</p></item><item><p>Window Eyes as of V.7.
</p></item></ulist>
					</ua-issue>
				</ua-issues>
				<description>
					<p>The purpose of this technique is to provide a label for objects that can be read by assistive technology. The <att>aria-label</att> attribute provides the text label for an object, such as a button. When a screen reader encounters the object, the <att>aria-label</att> text is read so that the user will know what it is.</p>
                    <p>Authors should be aware that <att>aria-label</att> may be disregarded by assistive technologies in situations where <att>aria-labelledby</att> is used for the same object. For more information on the naming hierarchy please consult the <loc href="http://www.w3.org/TR/wai-aria/roles#textalternativecomputation">ARIA specification</loc> and the <loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">accessible name and description calculation</loc> in the HTML to Platform Accessibility APIs Implementation Guide. Authors should be aware that use of <att>aria-label</att> will override any native naming such as <att>alt</att> on images or <el>label</el> associated with a form field using the <att>for</att> attribute.</p>
				</description>
				<examples>
					<eg-group>
						<head>Distinguishing navigation landmarks</head>
						<description>
							<p>The following example shows how <att>aria-label</att> could be used to distinguish two navigation landmarks in a HTML4 and XHTML 1.0 document, where there are more than two of the same type of landmark on the same page, and there is no existing text on the page that can be referenced as the label.</p>
						<codeblock xml:space="preserve"><![CDATA[<div role="navigation" aria-label="Primary">
<ul><li>...a list of links here ...</li></ul> </div>
<div role="navigation" aria-label="Secondary">
<ul><li>...a list of links here ...</li> </ul></div>]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Identifying region landmarks</head>
						<description>
							<p>The following example shows how a generic "region" landmark might be added to a weather portlet. There is no existing text on the page that can be referenced as the label, so it is labelled with <att>aria-label</att>.</p>
						<codeblock xml:space="preserve"><![CDATA[<div role="region" aria-label="weather portlet"> 
...
</div>]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Providing a label for Math</head>
						<description>
							<p>Below is an example of a MathML function, using the math role, appropriate label, and MathML rendering:</p>
						<codeblock xml:space="preserve"><![CDATA[<div role="math" aria-label="6 divided by 4 equals 1.5">
  <math xmlns="http://www.w3.org/1998/Math/MathML">
    <mfrac>
      <mn>6</mn>
      <mn>4</mn>
    </mfrac>
    <mo>=</mo>
    <mn>1.5</mn>
  </math>
</div>]]></codeblock>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
                            <item><p><loc href="http://www.w3.org/TR/html-aapi/#html-element-to-accessibility-api-role-mapping-matrix">HTML to Platform Accessibility APIs Implementation Guide: HTML Element to Accessibility API Role Mapping Matrix</loc></p>
                            </item>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
						</ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="ARIA16"/>
					<relatedtech idref="H44"/>
				</related-techniques>
				<tests>
					<procedure>
                        <p>For each element where a <att>aria-label</att> attribute is present.</p>
						<olist>
							<item>
								<p>Examine whether the text description accurately labels the object or provides a description of its purpose or provides equivalent information.</p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 is true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA7">
				<short-name>Using aria-labelledby for link purpose</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="navigation-mechanisms-refs" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                      <p>Screen reader testing as of October 2012</p>
                      <ulist>
                          <item><p>Not supported:</p>
                            <ulist>
                                <item><p>Win 7, IE 9, JAWS 13</p></item>
                                <item><p>Win 7, FF 13, NVDA 2012.2.1</p></item>
                                <item><p>Win XP, FF 15.0, NVDA 2011.3</p></item>
                                <item><p>Win XP, IE 8, SaToGo</p></item>
                            </ulist>
                          </item>
                          <item><p>Partial support (both link text and element referenced by aria-labeledby are read):</p>
                            <ulist>
                                <item><p>Win 7, IE9, NVDA 2012.2.1 (but Example 2 not supported)</p></item>
                                <item><p>Win XP, IE 8, NVDA 2011.3 (but Example 2 not supported)</p></item>
                            </ulist>
                          </item>
                          <item><p>Supported:</p>
                            <ulist>
                                <item><p>Win 7, FF 13, JAWS 13 (but Example 2 has only partial/buggy support: "Sales report 2012" is read twice)</p></item>
                                <item><p>Mac OS 10.5.8, VoiceOver</p></item>
                            </ulist>
                          </item>
                        </ulist>
                        <p><loc href="http://3needs.org/en/testing/code/aria-labelledby-for-link-purpose.html">See full testing results for Example 1</loc></p>
                        <p><loc href="http://3needs.org/en/testing/code/aria-labelledby-filetype.html">See full testing results for Example 2</loc></p>
                        <p>David <loc href="http://davidmacd.com/test/labelledby-on-a-link.html">tested</loc> on Aug 25, 2013... Example 2 and 3 are still not sufficiently supported.</p>
                        <ulist>
                            <item><p>Example 1 ok on JAWS, VoiceOver. NVDA ignores labelledby on an anchor</p></item>
                            <item><p>Example 2: JAWS 14 in FF, IE 10 read the entire paragraph for each link which is confusing and chatty. VoiceOver for Mountain Lion in Safari 6 same as JAWS. NVDA ignores labelledby on an anchor (unsuccessful implementation)</p></item>
                            <item><p>Example 3: JAWS 14 in FF, IE 10 read the entire paragraph for each link which is confusing and chatty, VoiceOver for Mountain Lion in Safari 6 OK. NVDA ignores labelledby on an anchor (unsuccessful implementation)</p></item>
                        </ulist>
					</ua-issue>
				</ua-issues>
				<description>
					<p>With the <att>aria-labelledby</att> attribute, authors can use a visible text element on the page as a label for a focusable element (a form control or a link). For example, a "read more..." link could be associated with the text of the heading of the preceding section to make the purpose of the link unambiguous (see example 1).</p>
                    <p>When associating text to a focusable element with the help of <att>aria-labelledby</att>, the target text element is given an ID which is referenced in the value of the <att>aria-labelledby</att> attribute of the focusable element.</p>
                    <p>It is also possible to use several text elements on the page as a label for a focusable element. Each of the text elements used must be given a unique ID which is referenced as a string of IDs (IDREF) in the value of the <att>aria-labelledby</att> attribute. The label text should then be concatenated following the order of IDs in the value of the <att>aria-labelledby</att> attribute.</p>
                    <p>When applied on links, <att>aria-labelledby</att> can be used to identify the purpose of a link that may be readily apparent for sighted users, but less obvious for screen reader users.</p>
                    <p>The specified behavior of <att>aria-labelledby</att> is that the associated label text is announced instead of the link text (not in addition to the link text). In many cases, it is important that the link text itself should be included in the label text. For instance, when speaking to a user who is blind about the contents of a page it would be helpful if were able to discern the contents of the link text. In these cases, the ID of the link should be referenced as well in the string of IDs forming the value of the <att>aria-labelledby</att> attribute. Alternatively, <att>aria-describedby</att> could be used which will provide the supplementary text which is referenced  text along with link text. </p>
                    <p>For more information on the naming hierarchy please consult the <loc href="http://www.w3.org/TR/wai-aria/roles#textalternativecomputation">ARIA specification</loc> and the <loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">accessible name and description calculation</loc> in the HTML to Platform Accessibility APIs Implementation Guide.</p>
				</description>
				<examples>
					<eg-group>
						<head>Providing additional information for links</head>
						<description>
							<p>This example should replace the "read more" link text at the end of the teaser text with the content of the <el>h2</el> heading referenced by <att>aria-labelledby</att>.</p>
						<codeblock xml:space="preserve"><![CDATA[<h2 id="headline">Storms hit east coast</h2>

<p>Torrential rain and gale force winds have struck the east coast, causing flooding in many coastal towns.
   <a href="news.html" aria-labelledby="headline">Read more...</a></p>]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Concatenating link text from multiple sources</head>
						<description>
							<p>The following example concatenates a link name through <att>aria-labelledby</att> referencing both the report title, "2012 Sales Report", and the respective file type, (PDF, Word, or Powerpoint).</p>
						<codeblock xml:space="preserve"><![CDATA[<p id="report-title">Download 2012 Sales Report:
<a aria-labelledby="report-title pdf" href="#" id="pdf">PDF</a> |
<a aria-labelledby="report-title doc" href="#" id="doc">Word</a> |
<a aria-labelledby="report-title ppt" href="#" id="ppt">Powerpoint</a></p>]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Concatenating link text from multiple sources, variation</head>
						<description>
							<p>There may be cases where an author will place a tag around a section of code that will be referenced.</p>
                            <p>Note: The use of <code>tabindex="-1"</code> on the <el>span</el> element is not meant to support focusing by scripts - here, it merely serves to ensure that some browsers (IE9, IE10) will include the <el>span</el> element in the accessibility tree, thus making it available for reference by <att>aria-labelledby</att>. For more details see <loc href="http://msdn.microsoft.com/en-us/library/ie/gg701963%28v=vs.85%29.aspx#Accessible_HTML_Elements">Accessible HTML Elements</loc>.</p>
						<codeblock xml:space="preserve"><![CDATA[<p>Download <span id="report-title" tabindex="-1">2012 Sales Report</span>:
<a aria-labelledby="report-title pdf" href="#" id="pdf">PDF</a> |
<a aria-labelledby="report-title doc" href="#" id="doc">Word</a> |
<a aria-labelledby="report-title ppt" href="#" id="ppt">Powerpoint</a></p>]]></codeblock>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
							<item>
								<p><loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide: Accessible Name and Description Calculation</loc> </p>
							</item>
						</ulist>
					</see-also>
				</resources>
<related-techniques>
				</related-techniques>
				<tests>
					<procedure>
						<p>For each link that has an <att>aria-labelledby</att> attribute:</p>
                        <olist>
							<item>
								<p>Check that each ID in the value of the <att>aria-labelledby</att> attribute matches an ID of a text element used as part of the link purpose.</p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 is true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA8">
				<short-name>Using aria-label for link purpose</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="navigation-mechanisms-refs" relationship="sufficient"/>
					<success-criterion idref="navigation-mechanisms-link" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <ulist><item><p>Jaws V.11 and greater has complete support.
</p></item><item><p>ChromeVox V.1 and greater has complete support 
</p></item><item><p>VoiceOver V.3 and greater
</p></item></ulist>
					</ua-issue>
				</ua-issues>
				<description>
					<p>The objective of this technique is to describe the purpose of a link using the <att>aria-label</att> attribute. The <att>aria-label</att> attribute provides a way to place a descriptive text label on an object, such as a link, when there are no elements visible on the page that describe the object. If descriptive elements are visible on the page, the <att>aria-labelledby</att> attribute should be used instead of <att>aria-label</att>. Providing a descriptive text label lets a user distinguish the link from links in the Web page that lead to other destinations and helps the user determine whether to follow the link. In some assistive technologies the <att>aria-label</att> value will show in the list of links instead of the actual link text.</p>
                    <p>Per the <loc href="http://www.w3.org/TR/wai-aria/roles#textalternativecomputation">WAI-ARIA specification</loc> and the <loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide</loc>, the <att>aria-label</att> text will override the text supplied within the link. As such the text supplied will be used instead of the link text by AT. Due to this it is recommended to start the text used in <att>aria-label</att> with the text used within the link. This will allow consistent communication between users.</p>
				</description>
				<examples>
					<eg-group>
						<head>Describing the purpose of a link in HTML using aria-label.</head>
						<description>
							<p>In some situations, designers may choose to lessen the visual appearance of links on a page by using shorter, repeated link text such as "read more". These situations provide a good use case for aria-label in that the simpler, non-descriptive "read more" text on the page can be replaced with a more descriptive label of the link. The words 'read more' are repeated in the aria-label (which replaces the original anchor text of "[Read more...]") to allow consistent communication between users.</p>
						<codeblock xml:space="preserve"><![CDATA[ <h4>Neighborhood News</h4>
 <p>Seminole tax hike:  Seminole city managers are proposing a 75% increase in 
 property taxes for the coming fiscal year.
 <a href="taxhike.html" aria-label="Read more about Seminole tax hike">[Read more...]</a>
 </p> 

 <p>Baby Mayor:  Seminole voters elect the city's youngest mayor ever by voting in 3 year
 old Willy "Dusty" Williams in yesterday's mayoral election.
 <a href="babymayor.html" aria-label="Read more about Seminole's new baby mayor">[Read more...]</a>
 </p>]]></codeblock>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
							<item>
								<p><loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide: Accessible Name and Description Calculation</loc> </p>
							</item>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria/roles#textalternativecomputation">WAI-ARIA Text Alternative Computation</loc></p>
							</item>
						</ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="ARIA6"/>
					<relatedtech idref="ARIA14"/>
					<relatedtech idref="ARIA7"/>
					<relatedtech idref="G91"/>
					<relatedtech idref="H30"/>
				</related-techniques>
				<tests>
					<procedure>
                        <p>For link elements that use <att>aria-label</att>:</p>
						<olist>
							<item>
								<p>Check that the value of the <att>aria-label</att> attribute properly describes the purpose of the link element.</p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 is true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA9">
				<short-name>Using aria-labelledby to concatenate a label from several text nodes</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="text-equiv-all" relationship="sufficient"/>
					<success-criterion idref="minimize-error-cues" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <p>Note: In order to support IE, the attribute <code>tabindex="-1"</code> may need to be provided on non-interactive elements that are referenced by aria-labelledby attributes. For more details see <loc href="http://www.w3.org/TR/aria-in-html/#aria-labelledby-and-aria-describedby">Using WAI-ARIA in HTML</loc>.
</p>
<ulist><item><p> Full support:
<ulist><item><p> WIN7 / FF16 / NVDA 2012.2.1 (Example 2: also reads column headers)
</p></item><item><p> WIN7 / FF16 / JAWS 13  (Example 2: also reads column headers)
</p></item><item><p> WIN7 / IE9  / JAWS 13
</p></item><item><p> WIN XP /FF16 / NVDA 2011.3
</p></item><item><p> iOS X / VoiceOver
</p></item></ulist>
</p></item></ulist>
<ulist><item><p> Partial support:
<ulist><item><p> WIN7 / IE9  / NVDA 2012.2.1 (Example 1: drops default text of text field: <emph>"Extend time-out to minutes edit selected 20"</emph>)
</p></item></ulist>
</p></item></ulist>
<ulist><item><p> Not supported:
<ulist><item><p> WIN XP / IE8 / NVDA 2001.3  Example 1: Does not read text referenced by <code>aria-labelledby</code> ('20','minutes'): <emph>"Extend time-out to edit selected 20"</emph>
</p></item><item><p> System Access To Go (IE8)
</p></item></ulist>
</p></item></ulist>

					</ua-issue>
				</ua-issues>
				<description>
					<p>The <prop>aria-labelledby</prop> property can be used to label all visual objects. Applied to inputs, the <prop>aria-labelledby</prop> property can be used to label native inputs as well as non-native elements, such as custom text inputs constructed with <code>div contenteditable="true"</code>.</p>
                    <p>One particular use of <prop>aria-labelledby</prop> is for text inputs in situations where a meaningful label should consist of more than one label string.</p>
                    <p>Authors assign unique <att>id</att>s to the label strings to be concatenated as the label for the <el>input</el> element. The value of the <att>aria-labelledby</att> attribute is then a space-separated list of all <att>id</att>s in the order in which the label strings referenced should be read by screen readers. Supporting user agents will concatenate the label strings referenced and read them as one continuous label of the input.</p>
                    <p>The concatenation of label strings can be useful for different reasons. In example 1, an input is nested within the context of a full sentence. The desired screen reader output is "Extend time-out to [ 20 ] minutes - edit with autocomplete, selected 20". Since the <att>id</att> of the text input is included in the string of <att>id</att>s referenced by aria-labelledby, the value of the input is included in the concatenated label at the right position.</p>
                    <p>Another application of <att>aria-labelledby</att> is when there is no space to provide a visible label next to the input, or when using native labels would create unnecessary redundancy. Here, the use <att>aria-labelledby</att> makes it possible to associate visible elements on the page as label for such inputs. This is demonstrated in example 2 where table column and row headings are concatenated into labels for the text input elements inside the table.</p>
                    <note><p>The <loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">ARIA accessible name and description calculation</loc> specifies that the string specified in <att>aria-labelledby</att> should replace rather than add to the content of the element that carries the property. So adding the <att>aria-labelledby</att> property to a native label should replace the text content inside that label unless the label itself is referenced as part of the sequence of <att>id</att>s in <att>aria-labelledby</att>.</p></note>
				</description>
				<examples>
					<eg-group>
						<head> A time-out input field with concatenated label</head>
						<description>
							<p>A text input allows users to extend the default time before a time-out occurs.</p>
                            <p>The string "Extend time-out to" is contained in a native <el>label</el> element and is associated with the input with the input by <code>id="timeout-duration"</code> . This label is associated with this input using the for/id association only on user agents that don't support ARIA. On user agents that support ARIA, the for/id association is ignored and the label for the input is provided only by <att>aria-labelledby</att>, per the <loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">accessible name and description calculation</loc> in the HTML to Platform Accessibility APIs Implementation Guide.</p>
                            <p>The <att>aria-labelledby</att> attribute on the text input references three elements: (1) the <el>span</el> containing the native label, (2) the text input containing the default text '20' (recall that this input is not labelled with the for/id associated label text), and (3) the string 'minutes' contained in a <el>span</el>. These elements should be concatenated to provide the full label for the text input</p>
                            <note>
                            <p>The use of <code>tabindex="-1"</code> on the <el>span</el> element is not meant to support focusing by scripts - here, it merely serves to ensure that some browsers (IE9, IE10) will include the <el>span</el> element in the accessibility tree, thus making it available for reference by <att>aria-labelledby</att>. For more details see <loc href="http://msdn.microsoft.com/en-us/library/ie/gg701963%28v=vs.85%29.aspx#Accessible_HTML_Elements">Accessible HTML Elements</loc></p>
                            </note>
						<codeblock xml:space="preserve"><![CDATA[<form>
<p><span id="timeout-label" tabindex="-1"><label for="timeout-duration">Extend time-out to</label></span>
<input type="text" size="3" id="timeout-duration" value="20" 
    aria-labelledby="timeout-label timeout-duration timeout-unit">
<span id="timeout-unit" tabindex="-1"> minutes</span></p>
</form>]]></codeblock>
                            <p>Working example, <loc href="ex1.html" linktype="examples">Time-out input field with concatenated label</loc>, adapted from Easy ARIA tip #2: <att>aria-labelledby</att> and <att>aria-describedby</att>, an example put together by Marco Zehe.</p>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>A simple data table with text inputs</head>
						<description>
							<p>A simple data table containing text inputs. The input labels are concatenated through <att>aria-labelledby</att> referencing the respective column and row headers.</p>
						<codeblock xml:space="preserve"><![CDATA[<table>
	<tr>
		<td></td>
		<th id="tpayer">Taxpayer</th>
		<th id="sp">Spouse</th>
	</tr>

	<tr>
		<th id="gross">W2 Gross</th>
		<td><input type="text" size="20" aria-labelledby="tpayer gross" /></td>
		<td><input type="text" size="20" aria-labelledby="sp gross" /></td>
	</tr>
	
	<tr>
		<th id="div">Dividends</th>
		<td><input type="text" size="20" aria-labelledby="tpayer div" /></td>
		<td><input type="text" size="20" aria-labelledby="sp div" /></td>
	</tr>
</table>]]></codeblock>
                            <p>Working example, <loc href="ex2.html" linktype="examples">Using aria-labelledby for simple table with text inputs</loc>, based on an example by Jim Thatcher.</p>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>A conference workshop booking table</head>
						<description>
							<p>A conference workshop booking table with two parallel tracks allows users to select the workshop they want to attend. When tabbing through the checkbox inputs in the table, the track (1 or 2), the title, and the speaker of the workshop followed by the adjacent checkbox label "Attend" are provided as concatenated label for the checkboxes via <att>aria-labelledby</att>.</p>
                            <p>Some browser / screen reader combinations (e.g. Mozilla Firefox and NVDA) will in addition speak the relevant table cell headers.</p>
						<codeblock xml:space="preserve"><![CDATA[<h1>Dinosaur Conference workshops timetable Thursday, 14.  & Friday, 15. March 2013</h1>
<table>
<caption>Dinosaur Conference workshop booking table</caption>
<tbody><tr>
	<td rowspan="2"></td>
	<th colspan="2" scope="colgroup">Thursday</th>
	<th colspan="2" scope="colgroup">Friday</th>
</tr>

<tr>
	<th scope="col" id="am1">9 to 12 AM</th>
	<th scope="col" id="pm1">2 to 5 PM</th>
	<th scope="col" id="am2">9 to 12 AM</th>
	<th scope="col" id="pm2">2 to 5 PM</th>
</tr>

<tr>
	<th id="track1" scope="row">track 1</th>
	<td>
		<h2 id="title-TM1">The Paleozoic era </h2>
		<p>2 places left</p>
		<p><input type="checkbox" id="TM1" aria-labelledby="title-TM1 track1 am1 TM1-att">
                <label id="TM1-att" for="TM1">Attend</label></p>
	</td>
	
	<td>
		<h2 id="title-TA1">The Mesozoic era overview</h2>
		<p>2 places left</p>
		<p><input type="checkbox" id="TA1" aria-labelledby="title-TA1 track1 am2 TA1-att">
                <label id="TA1-att" for="TA1">Attend</label></p>
	</td>
	
	<td>
		<h2 id="title-FM1">The Triassic period, rise of the dinosaurs</h2>
		<p>1 place left</p>
		<p><input type="checkbox" id="FM1" aria-labelledby="title-FM1 track1 pm1 FM1-att">
                <label id="FM1-att" for="FM1">Attend</label></p>

	</td>
	
	<td>
		<h2 id="title-FA1">The Jurassic period</h2>
		<p>11 places left</p>
		<p><input type="checkbox" id="FA1" aria-labelledby="title-FA1 track1 pm2 FA1-att">
                <label id="FA1-att" for="FA1">Attend</label></p>
	</td>
</tr>


<tr>
	<th id="track2" scope="row">track 2</th>
	<td>
		<h2 id="title-TM2">The Cretaceous period</h2>
		<p>18 places left</p>
		<p><input type="checkbox" id="TM2" aria-labelledby="title-TM2 track2 am1 TM2-att">
                <label id="TM2-att" for="TM2">Attend</label></p>
	</td>
	
	<td>
		<h2 id="title-TA2">The end of the dinosaurs</h2>
		<p>2 places left</p>
		<p><input type="checkbox" id="TA2" aria-labelledby="title-TA2 track2 am2 TA2-att">
                <label id="TA2-att" for="TA2">Attend</label></p>
	</td>
	
	<td>
		<h2 id="title-FM2">First discoveries of dinosaurs</h2>
		<p>2 places left</p>
		<p><input type="checkbox" id="FM2" aria-labelledby="title-FM2 track2 pm1 FM2-att">
                <label id="FM2-att" for="FM2">Attend</label></p>
	</td>
	
	<td>
		<h2 id="title-FA2">Emerging scholarship</h2>
		<p>19 places left</p>
		<p><input type="checkbox" id="FA2" aria-labelledby="title-FA2 track2 pm2 FA2-att">
                <label id="FA2-att" for="FA2">Attend</label></p>
	</td>
</tr>
</tbody>
</table>]]></codeblock>
                            <p>Working example: <loc href="ex3.html" linktype="examples">Conference workshop booking timetable</loc>.</p>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
                            <item>
								<p> <loc
									href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide: Accessible Name and Description Calculation</loc> </p>
							</item>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
							<item>
								<p><loc href="http://www.w3.org/TR/aria-in-html/">Using WAI-ARIA in HTML</loc>: Section 2.7 aria-labelledby and aria-describedby</p>
							</item>
						</ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="ARIA6"/>
					<relatedtech idref="ARIA16"/>
				</related-techniques>
				<tests>
					<procedure>
                        <p>For inputs that use <att>aria-labelledby</att>:</p>
                        <olist>
							<item>
								<p>Check that <att>id</att>s referenced in <att>aria-labelledby</att> are unique and match the <att>id</att>s of the text nodes that together provide the label</p>
							</item>
							<item>
								<p>Check that the concatenated content of elements referenced by <att>aria-labelledby</att> is descriptive for the purpose or function of the element labeled</p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 and #2 are true.</p>
                                <p>If this is a sufficient technique for a success criterion, failing this test procedure does not necessarily mean that the success criterion has not been satisfied in some other way, only that this technique has not been successfully implemented and can not be used to claim conformance.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>            
			<technique id="ARIA10">
				<short-name>Using aria-labelledby to provide a text alternative for non-text content</short-name>
				<applicability>
					<p>This technique applies to HTML with <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>.</p>
				</applicability>
				<applies-to>
					<success-criterion idref="text-equiv-all" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <ulist><item><p> NVDA 2012.3 supports Example 1 with FF</p></item></ulist>
                        <p>As of March 2014, there is much wider <loc href="accessibility-supporteddef">accessibility support</loc> for the use of the <att>alt</att> attribute than for <att>aria-labelledby</att>. The use of the <att>alt</att> attribute is best practice and strongly encouraged. Especially for elements where the <att>alt</att> attribute can be used to provide text alternatives, authors must confirm accessibility support for <att>aria-labelledby</att> before relying on this technique in place of <loc href="H37">H37: Using <att>alt</att> attributes on img elements</loc>.</p>
					</ua-issue>
				</ua-issues>
				<description>
					<p>The purpose of this technique is to provide a short description for an element that can be read by assistive technologies (AT) by using the <att>aria-labelledby</att> attribute. The <att>aria-labelledby</att> attribute associates an element with text that is visible elsewhere on the page by using an ID reference value that matches the ID attribute of the labeling element. Assistive technology such as screen readers use the text of the element identified by the value of the <att>aria-labelledby</att> attribute as the text alternative for the element with the attribute.</p>
				</description>
				<examples>
					<eg-group>
						<head>Providing a short description for a complex graphic</head>
						<description>
							<p>This example shows how to use the <att>aria-labelledby</att> attribute to provide a short text description for a read-only complex graphic of an star rating pattern; the graphic is composed of several image elements. The text alternative for the graphic is the label, visible on the page beneath the star pattern.</p>
						<codeblock xml:space="preserve"><![CDATA[<div role="img" aria-labelledby="star_id">
<img src="fullstar.png" alt=""/>
<img src="fullstar.png" alt=""/>
<img src="fullstar.png" alt=""/>
<img src="fullstar.png" alt=""/>
<img src="emptystar.png" alt=""/>
</div>

<div id="star_id">4 of 5</div>]]></codeblock>
<p>Working example: <loc href="ARIA10-example1.html" linktype="examples">Providing a short description for a complex graphic</loc>.
</p>
                            </description>
                    </eg-group>
                 </examples>
				<resources>
					<see-also>
						<ulist>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
                            <item>
								<p> <loc
									href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide: Accessible Name and Description Calculation</loc></p>
							</item>
                            <item>
								<p> <loc
									href="http://www.w3.org/TR/wai-aria/roles#textalternativecomputation">Accessible Rich Internet Applications (WAI-ARIA) 1.0, Section 5.2.7.3. Text Alternative Computation</loc></p>
							</item>
						</ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="H37"/>
					<relatedtech idref="F65"/>
				</related-techniques>
				<tests>
					<procedure>
						<olist>
							<item>
								<p>Examine each element where the <att>aria-labelledby</att> attribute is present and the element does not support the <att>alt</att> attribute.</p>
							</item>
							<item>
								<p>Check whether the value of the <att>aria-labelledby</att> attribute is the id of an element on the web page.</p>
							</item>
							<item>
								<p>Determine that the text of the element identified by the <att>aria-labelledby</att> attribute accurately labels the element, provides a description of its purpose, or provides equivalent information.</p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#2 and #3 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA11">
				<short-name>Using ARIA landmarks to identify regions of a page</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="content-structure-separation-programmatic" relationship="sufficient"/>
					<success-criterion idref="navigation-mechanisms-skip" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <ulist><item><p>Jaws V.11 and greater has complete support.
</p></item><item><p>ChromeVox V.1 and greater has complete support 
</p></item><item><p>VoiceOver V.3 and greater supports all landmarks except “form”.
</p></item><item><p>NVDA 2 supports all landmarks except it will not support navigation to “application”
</p></item><item><p>Window Eyes as of V.7 does not support ARIA landmarks.
</p></item></ulist>
					</ua-issue>
				</ua-issues>
				<description>
<p>The purpose of this technique is to provide programmatic access to sections of a web page.  Landmark roles (or "landmarks") programmatically identify sections of a page. Landmarks help assistive technology (AT) users orient themselves to a page and help them navigate easily to various sections of a page. 
</p><p>They also provide an easy way for users of assistive technology to skip over blocks of content that are repeated on multiple pages and notify them of programmatic structure of a page. For instance, if there is a common navigation menu found on every page, landmark roles (or "landmarks") can be used to skip over it and navigate from section to section. This will save assistive technology users and keyboard users the trouble and time of tabbing through a large amount of content to find what they are really after, much like a traditional "skip links" mechanism. (Refer to User Agent Notes above for specifics of AT support). A blind user who may be familiar with a news site's menu, and is only interested in getting to the top story could easily navigate to the "main" landmark, and bypass dozens of menu links. In another circumstance, a user who is blind may want to quickly find a navigation menu, and can do so by jumping to the navigation landmark. 
</p><p>Landmarks also can help sighted keyboard-only users navigate to sections of a page using a <loc href="http://blog.paciellogroup.com/2013/07/enabling-landmark-based-keyboard-navigation-in-firefox/">browser plugin</loc>. 
</p><p>Landmarks are inserted into the page using the role attribute on an element that marks the section. The value of the attribute is the name of the landmark. These role values are listed below:
</p>
<ulist><item><p>banner: A region that contains the prime heading or internal title of a page.
</p></item><item><p>complementary: Any section of the document that supports the main content, yet is separate and meaningful on its own.
</p></item><item><p>contentinfo:  A region that contains information about the parent document such as copyrights and links to privacy statements.
</p></item><item><p>form: A region of the document that represents a collection of form-associated elements, some of which can represent editable values that can be submitted to a server for processing.
</p></item><item><p>main: Main content in a document. In almost all cases a page will have only one role="main".
</p></item><item><p>navigation: A collection of links suitable for use when navigating the document or related documents.
</p></item><item><p>search: The search tool of a Web document.
</p></item><item><p>application: A region declared as a web application, as opposed to a web document. (note: The role of application should only be used with caution because it gives a signal to screen reading software to turn off normal web navigation controls. Simple widgets should generally not be given the application role, nor should an entire web page be given the application role, unless it is not to be used at all like a web page, and not without much user testing with assistive technology.)
</p></item></ulist>
<p>There are cases when a particular landmark role could be used more than once on a page, such as on primary and secondary navigation menus. In these cases, identical roles should be disambiguated from each other using a valid technique for labelling regions (see examples below).
</p><p>Landmarks should supplement native semantic markup such as HTML headings, lists and other structural markup. Landmarks are interpretable by WAI-ARIA-aware assistive technologies and are not exposed by browsers directly to users.
</p><p>It is a best practice to include ALL content on the page in landmarks, so that screen reader users who rely on them to navigate from section to section do not lose track of content.
</p>
				</description>
				<examples>
					<eg-group>
						<head>Simple landmarks</head>
						<description>
							<p>The following example shows how landmarks might be added to an HTML4 or XHTML 1.0 document:</p>
						<codeblock xml:space="preserve"><![CDATA[<div id="header" role="banner">A banner image and introductory title</div>
<div id="sitelookup" role="search">....</div>
<div id="nav" role="navigation">...a list of links here ... </div>
<div id="content" role="main"> ... Ottawa is the capital of Canada ...</div>
<div id="rightsideadvert" role="complementary">....an advertisement here...</div>
<div id="footer" role="contentinfo">(c)The Freedom Company, 123 Freedom Way, Helpville, USA</div>]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Multiple landmarks of the same type and aria-labelledby</head>
						<description>
							<p>The following example shows a best practice of how landmarks might be added to an HTML4 or XHTML 1.0 document in situations where there are more than two of the same type of landmark on the same page. For instance, if a navigation role is used multiple times on a Web page, each instance may have a unique label specified using <att>aria-labelledby</att>:

</p>
						<codeblock xml:space="preserve"><![CDATA[<div id="leftnav" role="navigaton" aria-labelledby="leftnavheading">
<h2 id="leftnavheading">Institutional Links</h2>
<ul><li>...a list of links here ...</li> </ul></div>
<div id="rightnav" role="navigation" aria-labelledby="rightnavheading">
<h2 id="rightnavheading">Related topics</h2>
<ul><li>...a list of links here ...</li></ul></div>]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Multiple landmarks of the same type and aria-label</head>
						<description>
							<p>The following example shows a best practice of how landmarks might be added to an HTML4 or XHTML 1.0 document in situations where there are more than two of the same type of landmark on the same page, and there is no existing text on the page that can be referenced as the label.</p>
						<codeblock xml:space="preserve"><![CDATA[<div id="leftnav" role="navigaton" aria-label="Primary">
<ul><li>...a list of links here ...</li></ul> </div>
<div id="rightnav" role="navigation" aria-label="Secondary">
<ul><li>...a list of links here ...</li> </ul></div>]]></codeblock>
                            </description>
                    </eg-group>
					<eg-group>
						<head>Search form</head>
						<description>
							<p>The following example shows a search form with a "search" landmark. The search role typically goes on the form field or a div surrounding the search form.</p>
						<codeblock xml:space="preserve"><![CDATA[<form role="search">
<label for="s6">search</label><input id="s6" type="text" size="20">
...
</form> ]]></codeblock>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
                            <item><p><loc href="http://blog.paciellogroup.com/2013/07/enabling-landmark-based-keyboard-navigation-in-firefox/">Enabling landmark-based keyboard navigation in Firefox</loc></p>
                            </item>
                            <item>
                                <p><loc href="http://accessibleculture.org/articles/2011/02/not-all-aria-widgets-deserve-role-application/">Accessible Rich Internet Applications (WAI-ARIA) 1.0, Supported States and Properties</loc></p>
                            </item>
<item><p> <loc href="http://accessibleculture.org/articles/2011/02/not-all-aria-widgets-deserve-role-application/">Not All ARIA Widgets Deserve role="application"</loc>
</p></item><item><p> <loc href="http://developer.yahoo.com/blogs/ydn/aria-role-application-53608.html">When Should You Use ARIA Role="Application"?</loc>
</p></item>						</ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="H69"/>
					<relatedtech idref="SCR28"/>
				</related-techniques>
				<tests>
					<procedure>
						<olist>
<item><p>Examine each element with a <loc href="http://www.w3.org/TR/wai-aria/roles#landmark_roles">landmark role</loc>.
</p></item><item><p>Examine whether the landmark role attribute is applied to the section of the page that corresponds with that role. (i.e., the "navigation" role is applied to a navigation section, the "main" role is applied to where the main content begins.)
</p></item>
                        </olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 and #2 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA12">
				<short-name>Using role=heading to identify headings</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="content-structure-separation-programmatic" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <ulist><item><p> Jaws 13 and higher supports this technique.
</p></item><item><p> NVDA 2012.3 supports this technique.
</p></item></ulist>
					</ua-issue>
				</ua-issues>
				<description>
<p>The purpose of this technique is to provide a way for Assistive Technologies (AT) to identify 
a piece of content as a heading. Applying <code>role="heading"</code> to an element causes an AT (like a 
screen reader) to treat it as though it were a heading. 
</p><p>If there is more than one heading on the page and the heading hierarchy is defined through the 
visual presentation, the <att>aria-level</att> attribute should be used to indicate the hierarchical level of 
the heading. 
</p><p>When possible, use native heading mark-up directly. For example, it is preferable 
to use <el>h1</el> rather than using <code>&lt;div role="heading" aria-level="1"&gt;</code>. However, the use of the 
heading role, instead of heading mark-up, may be necessary. For example, when retrofitting a legacy site where scripts depend on the existing element hierarchy.
</p><p>The use of the <prop>heading</prop> role and nesting levels is discussed in <loc href="http://www.w3.org/WAI/PF/aria-practices/#kbd_layout_nesting">WAI-ARIA 1.0 Authoring Practices</loc>.
</p>
				</description>
				<examples>
					<eg-group>
						<head>Simple headings</head>
						<description>
<p>This example demonstrates how to implement simple headings using role="heading" when retrofitting a legacy site where scripts depend on the existing element hierarchy or the level is unknown. For example, web content which is syndicated from various sources may be constructed without knowledge of what the final presentation will be.
</p>						<codeblock xml:space="preserve"><![CDATA[<div role="heading">Global News items</div>
... a list of global news with editorial comment....

<div role="heading">Local News items</div>
... a list of local news, with editorial comment ...]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Additional heading levels</head>
						<description>
							<p>This example demonstrates how to implement a level 7 heading using role="heading" and the <att>aria-level</att> attribute. Since HTML only supports headings through level 6, there is no native element to provide these semantics.</p>
							<codeblock xml:space="preserve"><![CDATA[...
<h5>Fruit Trees</h5>
...
<h6>Apples</h6>
<p>Apples grow on trees in areas known as orchards...</p>
...
<div role="heading" aria-level="7">Jonagold/div>
<p>Jonagold is a cross between the Golden Delicious and Jonathan varieties...</p>]]></codeblock>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
                            <item><p><loc href="http://www.w3.org/TR/wai-aria/roles#heading">Accessible Rich Internet Applications (WAI-ARIA) 1.0, Heading in the Roles Model</loc></p>
                            </item>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
						</ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="H42"/>
					<relatedtech idref="H69"/>
					<relatedtech idref="G141"/>
					<relatedtech idref="F2"/>
				</related-techniques>
				<tests>
					<procedure>
<olist><item><p> Examine each element with the attribute role="heading".
</p></item><item><p> Determine whether the content of the element is appropriate as a heading.
</p></item><item><p> If the element has an <att>aria-level</att> attribute, determine whether the value is the appropriate hierarchical level.
</p></item></olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#2 and #3 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA13">
				<short-name>Using aria-labelledby to name regions and landmarks</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="content-structure-separation-programmatic" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
					</ua-issue>
				</ua-issues>
				<description>
<p>The purpose of this technique is to provide names for regions of a page that can be read by assistive technology.  The <att>aria-labelledby</att> attribute provides a way to associate an section of the page marked up as a region or landmarks with text that is on the page that labels it.
</p><p>Landmark roles (or "landmarks") programmatically identify sections of a page. Landmarks help assistive technology (AT) users orient themselves to a page and help them navigate easily to various sections of a page.
</p><p>Like <att>aria-describedby</att>, <att>aria-labelledby</att> can accept multiple ids to point to other regions of the page using a space separated list. It is also limited to ids for defining these sets.
</p>
				</description>
				<examples>
					<eg-group>
						<head>Identify a landmark with on-page text</head>
						<description>
<p>Below is an example of <att>aria-labelledby</att> used on a complementary Landmark. The region of the document to which the heading pertains could be marked with the <att>aria-labelledby</att> property containing the value of the <att>id</att> for the header.</p>
                            <codeblock xml:space="preserve"><![CDATA[<p role="complementary" aria-labelledby="hdr1">
 <h1 id="hdr1">
    Top News Stories
 </h1>
</p>]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Identification for Application landmarks</head>
						<description>
							<p>The following code snippet for application landmarks with static prose. If you have a regional landmark of type application and static descriptive text is available, then on the application landmark, include an aria-describedby reference to associate the application and the static text as shown here:</p>
						<codeblock xml:space="preserve"><![CDATA[<div role="application" aria-labelledby="p123" aria-describedby="info">
<h1 id="p123">Calendar<h1>
<p id="info">
This calendar shows the game schedule for the Boston Red Sox.
</p>
<div role="grid">
....
</div>]]></codeblock>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
<ulist><item><p> <loc href="http://www.w3.org/TR/wai-aria-practices/">WAI ARIA 1.0 Authoring Practices</loc>
</p></item><item><p> <loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide: Accessible Name and Description Calculation</loc>
</p></item></ulist>
                    </see-also>
				</resources>
<related-techniques>
					<relatedtech idref="ARIA10"/>
					<relatedtech idref="ARIA6"/>
					<relatedtech idref="ARIA9"/>
					<relatedtech idref="ARIA16"/>
					<relatedtech idref="ARIA7"/>
					<relatedtech idref="G92"/>
					<relatedtech idref="H45"/>
				</related-techniques>
				<tests>
					<procedure>
<olist><item><p>Examine each element with attribute <code>role=region</code> or with a <loc href="http://www.w3.org/TR/wai-aria/roles#landmark_roles">landmark role</loc>, where an <code>aria-labelledby</code> attribute is also present.
</p></item><item><p>Check that the value of the <code>aria-labelledby</code> attribute is the <code>id</code> of an element on the page. 
</p></item><item><p>Check that the text of the element with that <code>id</code> accurately labels the section of the page.
</p></item></olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#2 and #3 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA14">
				<short-name>Using aria-label to provide an invisible label where a visible label cannot be used</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="ensure-compat-rsv" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <p>Screen reader support varies depending on browser:
</p>
<ulist><item><p> System Access To Go (IE8) does not recognise <code>aria-label</code>
</p></item><item><p> Using NVDA with Firefox (FF), <code>aria-label</code> is only spoken on custom controls
</p></item><item><p> Using NVDA with Internet Explorer (IE), <code>aria-label</code> is only spoken on native controls
</p></item><item><p> JAWS has the best support of <code>aria-label</code> 
</p></item></ulist>
<p>Here are the results of some detailed testing: 
</p>
<ulist><item><p>JAWS 13 (WIN7, FF13)
<ulist><item><p>Example 1: JAWS speaks <code>aria-label</code> of <code>div</code> set to <code>contentEditable</code> but not the content of the div (the word to be corrected)
</p></item><item><p>Example 2: JAWS speaks <code>aria-label</code>: "close button"
</p></item><item><p>Example 3: JAWS does not speak the <code>aria-label</code>, just says "button"
</p></item></ulist>
</p></item></ulist>
<ulist><item><p>JAWS 13 (WIN7, IE9)
<ulist><item><p>Example 1: JAWS speaks <code>aria-label</code>, but the content of <code>div</code> boxes is only spoken in Virtual PC cursor mode, not when tabbing to the <code>div</code>s
</p></item><item><p>Example 2: JAWS speaks content of <code>div</code> box (focus is being moved to its beginning through the skip link) followed by <code>aria-label</code>: "close button"
</p></item><item><p>Example 3: JAWS speaks the <code>aria-label</code>
</p></item></ulist>
</p></item></ulist>
<ulist><item><p>NVDA 2011.3 (XP, FF13) 
<ulist><item><p>Example 1: NVDA speaks specified <code>aria-label</code> of <code>div</code> set to <code>contentEditable</code>, followed by announcing "section editable" and, for mis-spelled words, "spelling error"
</p></item><item><p>Example 2: NVDA does not speak the <code>aria-label</code>, just "X button"
</p></item><item><p>Example 3: NVDA does not speak the <code>aria-label</code>, just "button" (- and + are dropped, but this may be customizable in screen reader settings)
</p></item></ulist>
</p></item></ulist>
<ulist><item><p>NVDA 2011.3 (XP, IE8) 
<ulist><item><p>Example 1: Browser focuses <code>div contentEditable</code> but apparently does not expose them to the accessibility API so NVDA does not speak associated contents of <code>aria-label</code>
</p></item><item><p>Example 2: NVDA speaks the <code>aria-label</code> content, "button close", instead of the text included in the button (X)
</p></item><item><p>Example 3: NVDA speaks the <code>aria-label</code> content
</p></item></ulist>
</p></item></ulist>
<ulist><item><p>NVDA 2012.2.1 (WIN7, IE9)
<ulist><item><p>Example 1: Same as under (XP, IE8): <code>div contentEditable</code> received focus but <code>aria-label</code> is not exposed to accessibilty API
</p></item><item><p>Example 2: NVDA speaks <code>aria-label</code> "This is a div box button close" in browse mode and "close button" in focus mode
</p></item><item><p>Example 3: Content of <code>aria-label</code> spoken
</p></item></ulist>
</p></item></ulist>
<ulist><item><p>NVDA 2012.2.1 (WIN7, FF13)
<ulist><item><p>Example 1: NVDA speaks specified <code>aria-label</code> for custom div set to contentEditable, followed by announcing "section editable" (but no announcement of mis-spelled words here)
</p></item><item><p>Example:2 Does not speak <code>aria-label</code> of X-button
</p></item><item><p>Example 3: NVDA does not speak <code>aria-label</code> for + and - button (- and + are dropped, but this may be customizable in screen reader settings)
</p></item></ulist>
</p></item></ulist>
<ulist><item><p> System Access To Go (XP, IE8): In all three examples, SAToGo does not recognise <code>aria-label</code>
<ulist><item><p>Example 1: SAToGo speaks "editable text" followed by the text in <code>div contentEditable</code>
</p></item><item><p>Example 2: After activating Link, SAToGo speaks content of the pop-up <code>div</code> followed by "button X
</p></item><item><p>Example 3: By default, SAToGo speaks "plus button" and "hyphen button" - not the content of <code>aria-label</code>
</p></item></ulist>
</p></item></ulist>
					</ua-issue>
				</ua-issues>
				<description>
<p>For sighted users, the context and visual appearance of an element can provide sufficient cues to determine the purpose. An example is the 'X' often used in the top right corner of pop-up divs (light boxes) to indicate the control for closing the div.  
</p><p>In some situations, elements can be given the attribute <att>aria-label</att> to provide an accessible name for situations when there is no visible label due to a chosen design approach or layout but the context and visual appearance of the control make its purpose clear.
</p><p>In other situations, elements can be given the attribute <att>aria-label</att> to provide an accessible name when the native HTML labeling element is not supported by the control - for example, when a <el>div</el> set to <att>contentEditable</att> is used instead of native form elements such as <code>input type="text"</code> or <el>textarea</el> in order to provide a richer text editing experience.
</p>
				</description>
				<examples>
					<eg-group>
						<head>A close button (X) in a pop-up box</head>
						<description>
<p>On a page, a link displays a pop-up box (a div) with additional information. The 'close' element is implemented as a button containing merely the letter 'x'. The property <code>aria-label="close"</code> is used to provide an accessible name to the button.
</p>
						<codeblock xml:space="preserve"><![CDATA[<div id="box">
   This is a pop-up box.
   <button aria-label="Close" onclick="document.getElementById('box').style.display='none';" class="close-button">X</button>				
</div>]]></codeblock>
                            <p>Working example: <loc href="box.html" linktype="examples">Close button example</loc>.
</p>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>A phone number with multiple fields</head>
						<description>
						<codeblock xml:space="preserve"><![CDATA[<div role="group" aria-labelledby="groupLabel">
  <span id="groupLabel>Work Phone</span>
  +<input type="number" aria-label="country code">
  <input type="number" aria-label="area code">
  <input type="number" aria-label="subscriber number">
</div>]]></codeblock>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
<ulist><item><p> <loc href="http://www.w3.org/TR/wai-aria-practices/">WAI ARIA 1.0 Authoring Practices</loc>
</p></item><item><p> <loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide: Accessible Name and Description Calculation</loc>
</p></item></ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="ARIA6"/>
					<relatedtech idref="ARIA16"/>
				</related-techniques>
				<tests>
					<procedure>
<p>For elements that use <att>aria-label</att>:
</p>
<olist><item><p>Check that the value of the <att>aria-label</att> attribute properly describes the purpose of an element where user input is required
</p></item></olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 is true.</p>
							</item>
						</ulist>
                    </expected-results>
				</tests>
			</technique>
			<technique id="ARIA15">
				<short-name>Using aria-describedby to provide descriptions of images</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="text-equiv-all" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <p>Updated July 16, 2013
</p>
<ulist><item><p>Jaws V.11 and greater has complete support. IE10 JAWS 14. Speaks alt and then "press JAWS key + alt +r to hear descriptive text". IE 10 intermittent support, sometimes works, sometimes need to reload the page for JAWs to read it properly. 
</p></item><item><p>ChromeVox V.1 and greater has complete support? 
</p></item><item><p>VoiceOver V.3 and greater supports but replaces ALT text if both are present
</p></item><item><p>NVDA 2 reads ALT text if both are present but not Describedby unless it is alone
</p></item><item><p>Window Eyes as of V.7 ???.
</p></item></ulist>
					</ua-issue>
				</ua-issues>
				<description>
<p>The objective of this technique is to provide descriptions of images when a short text alternative does not adequately convey the function or information provided in the object. 
</p><p>A feature of WAI-ARIA is the ability to associate descriptive text with a section, drawing, form element, picture, and so on using the <prop>aria-describedby</prop> property. This is similar to the <att>longdesc</att> attribute in that both are useful for providing additional information to help users understand complex images. Like <att>longdesc</att>, descriptive text provided using <att>aria-describedby</att> is separate from the short name provided using the <att>alt</att> attribute in HTML. Unlike <att>longdesc</att>, <att>aria-describedby</att> cannot reference descriptions outside of the page containing the image. An advantage of providing long descriptions using content from the same page as the image is that the alternative is available to all, including sighted people who do not have assistive technology. It is worth noting that as of the time of writing (October 2013) some assistive technologies read <att>aria-describedby</att> content immediately after an image's alt attribute information without user activation - whereas most implementations of <att>longdesc</att> require the user to take explicit action to read the additional description.
</p><p>Like <att>aria-labelledby</att>, <att>aria-describedby</att> can accept multiple ids to point to other regions of the page using a space separated list. It is also limited to ids for defining these sets.
</p>
				</description>
				<examples>
					<eg-group>
						<head>Describing an image</head>
						<description>
<p>The following example shows how <att>aria-describedby</att> can be applied to an image to provide a long description, where that text description is on the same page as the image. 
</p>
						<codeblock xml:space="preserve"><![CDATA[<img src="ladymacbeth.jpg" alt="Lady MacBeth" aria-describedby="p1">
<p id="p1">This painting dates back to 1730 and is oil on canvas. It was created by 
Jean-Guy Millome, and represents ...</p>]]></codeblock>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
<ulist><item><p> <loc href="http://www.w3.org/TR/wai-aria-practices/">WAI ARIA 1.0 Authoring Practices</loc>
</p></item><item><p> <loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide: Accessible Name and Description Calculation</loc>
</p></item></ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="ARIA6"/>
					<relatedtech idref="ARIA16"/>
					<relatedtech idref="G92"/>
					<relatedtech idref="H45"/>
				</related-techniques>
				<tests>
					<procedure>
<olist><item><p>Examine each image element where a <att>aria-describedby</att> attribute is present.
</p></item><item><p>Examine whether the <att>aria-describedby</att> attribute  programatically associates an element with its text description, via the <att>id</att> attribute on the element where the text to be used as the description is found. 
</p></item><item><p>Examine whether the combined text equivalent and associated text description accurately describe or provide the equivalent purpose to the object.
</p></item></olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1, #2, and #3 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>            
			<technique id="ARIA16">
				<short-name>Using aria-labelledby to provide a name for user interface controls</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="content-structure-separation-programmatic" relationship="sufficient"/>
					<success-criterion idref="ensure-compat-rsv" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <ulist><item><p>Jaws V.11 and greater has complete support.
</p></item><item><p>ChromeVox V.1 and greater has complete support 
</p></item><item><p>VoiceOver V.3 and greater supports ???
</p></item><item><p>NVDA 2 supports Aria Describedby ???
</p></item><item><p>Window Eyes as of V.7 ???.
</p></item></ulist>
					</ua-issue>
				</ua-issues>
				<description>
<p>The purpose of this technique is to provide names for user interface controls that can be read by assistive technology.  WAI-ARIA provides a way to associate text with a section, drawing, form element, picture, and so on, using the <att>aria-labelledby</att> property. This techniques uses the <att>aria-labelledby</att> attribute to associate a user interface control, such as a form field, with text on the page that labels it.
</p><p>Like <att>aria-describedby</att>, <att>aria-labelledby</att> can accept multiple ids to point to other elements of the page using a space separated list. This capability makes <att>aria-labelledby</att> especially useful in situations where sighted users use information from the surrounding context to identify a control. <loc href="ARIA9">Using aria-labelledby to concatenate a label from several text nodes</loc> contains more examples of situations where names are created from several other text elements on the page.
</p><p>While the function of aria-labelledby appears similar to the native HTML label element, there are some differences:
</p>
<ulist><item><p> <att>aria-labelledby</att> can reference more than one text element; <el>label</el> can only reference one.</p>
</item><item><p> <att>aria-labelledby</att> can be used for a variety of elements while the <el>label</el> element can only be used on form elements.</p>
</item><item><p> Clicking on a <el>label</el> focuses the associated form field. This does not occur with <att>aria-labelledby</att>. If this behaviour is required then use <el>label</el> or implement this functionality using scripting.
</p></item></ulist>
<p>Note that as of December 2013, <el>label</el> has better support than <att>aria-labelledby</att>, especially in older browsers and assistive technologies.
</p>
				</description>
				<examples>
					<eg-group>
						<head>Labelling a simple text field</head>
						<description>
							<p>The following is an example of <att>aria-labelledby</att> used on a simple text field to provide a label in a situation where there is no text available for a dedicated label but there is other text on the page that can be used to accurately label the control.</p>
						<codeblock xml:space="preserve"><![CDATA[<input name="searchtxt" type="text" aria-labelledby="searchbtn">
<input name="searchbtn" id="searchbtn" type="submit" value="Search">]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Labelling a slider</head>
						<description>
							<p>Below is an example of <att>aria-labelledby</att> used to provide a label for a slider control. In this case the label text is selected from within a longer adjacent text string. Please note that this example is simplified to show only the labeling relationship; authors implementing custom controls also need to ensure that controls meet other success criteria.</p>
						<codeblock xml:space="preserve"><![CDATA[<p>Please select the <span id="mysldr-lbl">number of days for your trip</span></p>
<div id="mysldr" role="slider" aria-labelledby="mysldr-lbl"></div>]]></codeblock>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>A label from multiple sources</head>
						<description>
<p>The following example of <att>aria-labelledby</att> with multiple references uses the <el>label</el> element. For additional detail on concatenating multiple sources of information into a label with <att>aria-labelledby</att>, please view the technique <loc href="ARIA9">Using ARIA labelledby to concatenate a label from several text nodes</loc>.
</p>
						<codeblock xml:space="preserve"><![CDATA[<label id="l1" for="f3">Notify me</label>
<select name="amt" id="f3" aria-labelledby="l1 f3 l2">
  <option value="1">1</option>
  <option value="2">2</option>
</select>
<span id="l2" tabindex="-1">days in advance</span>]]></codeblock>
<p>Note: The use of the <el>label</el> element is included for a number of reasons. If the user clicks on the text of the <el>label</el> element, the corresponding form field will receive focus, which makes the clicking target larger for people with dexterity problems. Also the <el>label</el> element will always be exposed via the accessibility API. A <el>span</el> could have been used (but if so, it should receive a <code>tabindex="-1"</code> so that it will be exposed via the accessibility API in all versions of Internet Explorer). However, a <el>span</el> would lose the advantage of the larger clickable region.
</p>
                        </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
<ulist><item><p> <loc href="http://www.w3.org/TR/wai-aria-practices/">WAI ARIA 1.0 Authoring Practices</loc>
</p></item><item><p> <loc href="http://www.w3.org/TR/html-aapi/#accessible-name-and-description-calculation">HTML to Platform Accessibility APIs Implementation Guide: Accessible Name and Description Calculation</loc>
</p></item></ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="ARIA10"/>
					<relatedtech idref="ARIA6"/>
					<relatedtech idref="ARIA9"/>
					<relatedtech idref="ARIA7"/>
					<relatedtech idref="ARIA13"/>
					<relatedtech idref="G92"/>
					<relatedtech idref="H45"/>
				</related-techniques>
				<tests>
					<procedure>
<p>For each user interface control element where an <att>aria-labelledby</att> attribute is present:
</p>
<olist><item><p>Check that the value of the <att>aria-labelledby</att> attribute is the <att>id</att> of an element or a space separated list of <att>id</att>s on the web page. 
</p></item><item><p>Check that the text of the referenced element or elements accurately labels the user interface control.
</p></item></olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 and #2 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA17">
				<short-name>Using grouping roles to identify related form controls</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="content-structure-separation-programmatic" relationship="sufficient"/>
					<success-criterion idref="minimize-error-cues" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <p>This technique works with:</p> 
<ulist><item><p>JAWS 13 / 14 with Internet Explorer 8 / 9, Firefox</p></item><item><p>NVDA 2012 / 2013 with Firefox</p></item><item><p>VoiceOver with Safari on OSX 10.7.4  on MacBook Pro but not on later versions like OSX 10.8.
(This has been reported to Apple along with broken support for the HTML "title" attribute)</p></item></ulist>
					</ua-issue>
				</ua-issues>
				<description>
<p>The objective of this technique is to mark up a set of related controls within a form  as a group. Any label associated with the group also serves as a common label or qualifier for individual controls in the group. Assistive technologies can indicate the start and end of the group and the group’s label as one navigates into and out of the group.  This is a viable alternative for grouping form controls programmatically when the user interface’s design makes it difficult to employ the fieldset-legend technique (<loc href="H71">H71</loc>).</p>
<p>For a group of radio buttons, one could also use <code>role="radiogroup"</code> instead of <code>role="group"</code>.</p>
<p>The group can be labeled using <att>aria-labelledby</att>.</p>  
<p>This technique is not meant for wrapping  all controls on a form within a single container with <code>role="group"</code>.</p>
				</description>
				<examples>
					<eg-group>
						<head>Social Security Number</head>
						<description>
<p>Social security number fields which are 9 digits long and broken up into 3 segments can be grouped using <code>role="group"</code>.</p>
						<codeblock xml:space="preserve"><![CDATA[<div role="group" aria-labelledby="ssn1">
   <span id="ssn1">Social Security#</span> 
   <span style="color: #D90D0D;"> * </span>
   <input size="3" type="text" aria-required="true" title="First 3 digits" />-
   <input size="2" type="text" aria-required="true" title="Next 2 digits" />-
   <input size="4" type="text" aria-required="true" title="Last 4 digits" />
</div>]]></codeblock>
                            <p>Working example: <loc href="ssn.html" linktype="examples">Multiple part field groups</loc>.</p>
                            </description>
                    </eg-group>
                    
					<eg-group>
						<head>Identifying radio groups</head>
						<description>
<p>This example demonstrates use role=radiogroup. Note also that the radio buttons are custom controls with role=radio. (But the script to make the span actually work like radio buttons is not included in this example. ) One may optionally employ CSS to place a border around groups of such fields to visually reinforce the group relationship. The CSS properties are available below the form.</p> 
						<codeblock xml:space="preserve"><![CDATA[<h3>Set Alerts for your Account</h3>
  <div role="radiogroup" aria-labelledby="alert1">
    <p id="alert1">Send an alert when balance exceeds $ 3,000</p>
    <div>
      <span role="radio" aria-labelledby="a1r1" name="a1radio"></span>
      <span id="a1r1">Yes</span>
    </div>
    <div>
      <span role="radio" aria-labelledby="a1r2" name="a1radio"></span>
      <span id="a1r2">No</span>
    </div>
  </div>
  <div role="radiogroup" aria-labelledby="alert2">
    <p id="alert2">Send an alert when a charge exceeds $ 250</p>
    <div>
      <span role="radio" aria-labelledby="a2r1" name="a2radio"></span>
      <span id="a2r1">Yes</span>
    </div>
    <div>
      <span role="radio" aria-labelledby="a2r2" name="a2radio"></span>
      <span id="a2r2">No</span>
    </div>
  </div>
  <p><input type="submit" value="Continue" id="continue_btn" name="continue_btn" /></p>]]></codeblock>
                            <p>Related CSS Style Definition to place a border around the group of fields :</p>
						<codeblock xml:space="preserve"><![CDATA[div[role=radiogroup] {
  border: black thin solid;
} ]]></codeblock>
							<p>Working example: <loc href="grouping-roles-example.html" linktype="examples">using grouping roles to identify related form controls</loc>.</p>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
                            <item><p><loc href="http://www.w3.org/TR/wai-aria/roles#group">Accessible Rich Internet Applications (WAI-ARIA) 1.0, The Roles Model</loc></p>
                            </item>
						</ulist>
					</see-also>
				</resources>
<related-techniques>
					<relatedtech idref="H71"/>
				</related-techniques>
				<tests>
					<procedure>
<p>For groups of related controls where the individual labels for each control do not provide a sufficient description, and an additional group level description is needed:
</p>
<olist><item><p> Check that the group of logically related input or select elements are contained within an element with role=group. 
</p></item><item><p> Check that this group has an accessible name defined using <att>aria-label</att> or <att>aria-labelledby</att>.
</p></item></olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 and #2 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>            
			<technique id="ARIA18">
				<short-name>Using aria-alertdialog to Identify Errors</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="minimize-error-identified" relationship="sufficient"/>
					<success-criterion idref="minimize-error-suggestions" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <ulist><item><p> Jaws 13 and higher supports this technique.
</p></item></ulist>
					</ua-issue>
				</ua-issues>
				<description>
<p>The purpose of this technique is to alert people that an input error has occured. Using <code>role="alertdialog"</code> creates a notification. This notification should be modal with the following characteristics:
</p>
<ulist><item><p><att>aria-label</att> or <att>aria-labelledby</att> attribute gives the alertdialog an accessible name.
</p></item><item><p><att>aria-describedby</att> provides a reference to the text of the alert.
</p></item><item><p>The alertdialog contains at least one focusable control, and the focus should move to that control when the alertdialog opens.
</p></item><item><p>The tab order is constrained within the alertdialog whilst it is open.
</p></item><item><p>When the dialog is dismissed, the focus moves back to the position it had before the dialog opened, if possible.
</p></item></ulist>
<p>Note that the alertdialog should not be present in a way that it will be accessed by AT until it is needed. One way to do this is not to include it in the static HTML and instead to insert it into the DOM via script when the error condition is triggered. The insertion would correspond to the following HTML sample.
</p>
				</description>
				<examples>
					<eg-group>
						<head>Alert dialog</head>
						<description>
							<p>This example shows how a notification using <code>role="alertdialog"</code> can be used to notify someone they have entered invalid information.</p>
						<codeblock xml:space="preserve"><![CDATA[<div role="alertdialog" aria-labelledby="alertHeading" aria-describedby="alertText">
<h1 id="alertHeading">Error</h1>
<div id="alertText">Employee's Birth Date is after their hire date. Please verify the birth date and hire date.</div>
<button>Save and Continue</button>
<button>Return to page and correct error</button>
</div>]]></codeblock>
                            <p>Working example: <loc href="aria-role-alertdialog.html" linktype="examples">Alert dialog</loc>.</p>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
						<ulist>
							<item>
								<p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0 Authoring Practices</loc> </p>
							</item>
						</ulist>
					</see-also>
				</resources>
<related-techniques/>
				<tests>
					<procedure>
<olist><item><p>Trigger the error that causes the alertdialog to appear.
</p></item><item><p>Determine that the alertdialog contains at least one focusable control, and the focus moves to that control when the alertdialog opens.
</p></item><item><p>Determine that the tab order is constrained within the alertdialog while it is open, and when the dialog is dismissed, the focus moves back to the position it had before the dialog opene, if possible.
</p></item><item><p>Examine the element with <code>role="alertdialog"</code> applied.
</p></item><item><p>Determine that either the <att>aria-label</att> or <att>aria-labelledby</att> attribute has been correctly used to give the alertdialog an accessible name.
</p></item><item><p>Determine that the contents of the alertdialog identifies the input error.
</p></item><item><p>Determine whether contents of the alertdialog suggests how to fix the error.
</p></item></olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
<p>Checks 2, 3, 5 and 6 are true. For SC 3.3.3, Check 7 is also true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>
			<technique id="ARIA19">
				<short-name>Using ARIA role=alert or Live Regions to Identify Errors</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
				</applicability>
				<applies-to>
					<success-criterion idref="minimize-error-identified" relationship="sufficient"/>
				</applies-to>
				<ua-issues>
					<ua-issue name="" version="">
						<p>See <specref ref="wai-aria_ua_support"/> for general information on user agent support.</p>
                        <p>Supports this technique:
</p>
<ulist><item><p> OS X 10.8.4 + Safari + VoiceOver
</p></item><item><p> iOS 6 &amp; 7 + Mobile Safari + VoiceOver
</p></item><item><p> Windows 7 + Firefox 20 + NVDA 2013.1
</p></item><item><p> Windows 7 + Firefox 20 + JAWS 14
</p></item><item><p> Windows 7 + IE 8 + JAWS 14 (aria-live=assertive ONLY)
</p></item><item><p> Windows 7 + IE 7 + JAWS 14 (aria-live=assertive ONLY)
</p></item></ulist>
<p>Does NOT support this technique:
</p>
<ulist><item><p> Windows 7 + IE 8 + NVDA 2013.1 (NO support)
</p></item></ulist>
<p>Support Notes:
</p><p>When using Firefox with JAWS and NVDA role=alert is announced as "Alert" and aria-live=assertive does not include that extra text. There is NO support for NVDA 2013.1 + IE 8. The third example uses BOTH role=alert &amp; aria-live=assertive on the error container for wider UA/AT support working in all combinations listed.
</p><p>There are different methods to display an alert or assertive live region on the page and depending on how you create the error container or inject the error messages determines if it will work in the more difficult browsers/screen reader combinations like IE 8 + JAWS 14 or VoiceOver + Safari.
</p>
					</ua-issue>
				</ua-issues>
				<description>
<p>The purpose of this technique is to notify Assistive Technologies (AT) when an input error occurs. The <att>aria-live</att> attribute makes it possible for an AT (such as a screen reader) to be notified when error messages are injected into a Live Region container. The content within the <att>aria-live</att> region is automatically read by the AT, without the AT having to focus on the place where the text is displayed.
</p><p>There are also a number of <loc href="http://www.w3.org/WAI/PF/aria-practices/#chobet">special case live region roles</loc> which can be used instead of applying live region properties directly.</p>
				</description>
				<examples>
					<eg-group>
						<head>Injecting error messages into a container with role=alert already present in the DOM</head>
						<description>
<p>The following example uses <code>role=alert</code> which is equivalent to using <code>aria-live=assertive</code>.
</p><p>In the example there is an empty error message container element with <code>aria-atomic=true</code> and an <code>aria-live</code> property or <code>alert</code> role present in the DOM on page load. The error container must be present in the DOM on page load for the error message to be spoken by most screen readers. <code>aria-atomic=true</code> is necessary to make Voiceover on iOS read the error messages after more than one invalid submission. 
</p><p>jQuery is used to test if the inputs are empty on submit and inject error messages into the live region containers if so. Each time a new submit is attempted the previous error messages are removed from the container and new error messages injected.
</p>
						<codeblock xml:space="preserve"><![CDATA[<script src="http://code.jquery.com/jquery.js"></script>
<script>
$(document).ready(function(e) {
	$('#signup').submit(function() {
		$('#errors').html('');
		if ($('#first').val() === '') {
			$('#errors').append('<p>Please enter your first name.</p>');
		}
		if ($('#last').val() === '') {
			$('#errors').append('<p>Please enter your last name.</p>');
		} 
		if ($('#email').val() === '') {
			$('#errors').append('<p>Please enter your email address.</p>');
		} 
		return false;
	});
});
</script>

<form name="signup" id="signup" method="post" action="">
  <p id="errors" role="alert" aria-atomic="true"></p>
  <p>
    <label for="first">First Name (required)</label><br>
    <input type="text" name="first" id="first">
  </p>
  <p>
    <label for="last">Last Name (required)</label><br>
    <input type="text" name="last" id="last">
  </p>
  <p>
    <label for="email">Email (required)</label><br>
    <input type="text" name="email" id="email">
  </p>
  <p>
    <input type="submit" name="button" id="button" value="Submit">
  </p>
</form>]]></codeblock>
                            <p>Working example: <loc href="aria-alert-validation.html" linktype="examples">Using role=alert to identify errors</loc>.</p>
                            </description>
                    </eg-group>
                </examples>
				<resources>
					<see-also>
<ulist><item><p><loc href="http://www.w3.org/TR/wai-aria-practices/">WAI-ARIA 1.0, Authoring Practices</loc>
</p></item><item><p><loc href="http://blog.paciellogroup.com/2012/06/html5-accessibility-chops-aria-rolealert-browser-support/">HTML5 Accessibility Chops: ARIA role=alert browser support</loc>
</p></item><item><p> <loc href="http://html.cita.illinois.edu/nav/form/aria/">Form Labels, ARIA Examples (Experimental)</loc>
</p></item><item><p> <loc href="http://www.msfw.com/accessibility/">MSF&amp;W Accessibility</loc>
</p></item><item><p> <loc href="http://www.w3.org/TR/2011/CR-wai-aria-20110118/states_and_properties#aria-describedby">ARIA 1.0, Supported States and Properties, aria-describedby</loc>
</p></item><item><p> <loc href="http://www.w3.org/TR/2011/CR-wai-aria-20110118/roles#alert">WAI-ARIA 1.0, The Roles model, alert</loc>
</p></item><item><p> <loc href="http://www.w3.org/TR/2011/WD-html5-20110525/">HTML5, A vocabulary and associated APIs for HTML and XHTML</loc>
</p></item></ulist>
					</see-also>
				</resources>
<related-techniques/>
				<tests>
					<procedure>
<olist><item><p>Determine that an empty error container <code>role=alert</code> or <code>aria-live=assertive</code> attribute is present in the DOM at page load.</p>
    </item><item><p> Trigger the error that causes the content in the live region to appear or update.
</p></item><item><p> Determine that the error message was injected into the already present error container.
</p></item></olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 and #3 are true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>            
  <technique id="ARIA20" diff="add">
				<short-name>Using aria-describedby for link purpose</short-name>
				<applicability>
					<p>Technologies that support <loc href="http://www.w3.org/TR/wai-aria/">Accessible Rich Internet Applications (WAI-ARIA)</loc>. </p>
					
                            
                        </ulist>
					</ua-issue>
				</ua-issues>
				<description>
					<p>With the <att>aria-describedby</att> attribute, authors can use a visible text element on the page as a label for a focusable element (a form control or a link). For example, a "read more..." link could be associated with the text of the heading of the preceding section to make the purpose of the link unambiguous (see example 1).</p>
		
                    <p>When associating target text with a focusable element with the help of <att>aria-describedby</att>, the target text element is given an ID which is referenced in the value of the <att>aria-describedby</att> attribute of the focusable element.</p>
                    <p>It is also possible to reference several text elements on the page to provide a more detailed description for a focusable element. Each of the text elements used must be given a unique ID which is referenced as a string of IDs (IDREF) in the value of the <att>aria-describedby</att> attribute. The description text should then be concatenated following the order of IDs in the value of the <att>aria-describedby</att> attribute.</p>
                    <p>When applied on links, <att>aria-describedby</att> can be used to identify the purpose of a link that may be readily apparent for sighted users, but less obvious for screen reader users.</p>
					<p>From the perspective of a web author, <att>aria-describedby</att> references target text exactly like <att>aria-labelledby</att>. However, unlike <att>aria-labelledby</att>, the <att>aria-describedby</att> attribute allows the link text AND the supplementary text to be read by assistive technology. This is a great advantage over <att>aria-labelledby</att> which, by default, replaces the link text, and without special attention, leaves a non-sighted user without any reasonable way of knowing what is in the actual anchor link text.</p>
                    
				</description>
				<examples>
					<eg-group>
						<head>Providing additional information for links</head>
						<description>
							<p>This example should replace the "read more" link text at the end of the teaser text with the content of the <el>h2</el> heading referenced by <att>aria-labelledby</att>.</p>
						<codeblock xml:space="preserve"><![CDATA[<h2 id="headline">Stock market makes dramatic recovery</h2>

<p>After a day of heavy trading, all major market report significant imporvements</p>
   <a href="news.html" aria-describedby="headline">Read more...</a></p>]]></codeblock>
                            </description>
                    </eg-group>
                    
					                    
				
                </examples>
				<resources>
					<see-also>
						<ulist>
							
						</ulist>
					</see-also>
				</resources>
<related-techniques>
				</related-techniques>
				<tests>
					<procedure>
						<p>For each link that has an <att>aria-describedby</att> attribute:</p>
                        <olist>
							<item>
								<p>Check that each ID in the value of the <att>aria-describedby</att> attribute matches an ID of a text element used as part of the link purpose.</p>
							</item>
							<item>
								<p>Check that the value of the <att>aria-describedby</att> combined with the link text provides the purpose of the link.</p>
							</item>
						</olist>
					</procedure>
					<expected-results>
						<ulist>
							<item>
								<p>#1 is true.</p>
							</item>
						</ulist>
					</expected-results>
				</tests>
			</technique>          
            
        </div1>
	</body>
	<back>
		<div1 id="placeholders">
			<!-- note: this can be updated using /misc/id-list.xslt (requires cut and paste)-->
			<head/>
			<p id="UNKNOWN">place holder for idref</p>
			<p id="cc1">placeholder for cc1</p>
			<p id="cc2">placeholder for cc2</p>
			<p id="cc3">placeholder for cc3</p>
			<p id="cc4">placeholder for cc4</p>
			<p id="cc5">placeholder for cc5</p>
			<p id="text-equiv">placeholder for text-equiv</p>
			<p id="text-equiv-all">placeholder for text-equiv-all</p>
			<p id="text-equiv-live-audio-only">placeholder for text-equiv-live-audio-only</p>
			<p id="media-equiv">placeholder for media-equiv</p>
			<p id="media-equiv-av-only-alt">placeholder for media-equiv-av-only-alt</p>
			<p id="media-equiv-captions">placeholder for media-equiv-captions</p>
			<p id="media-equiv-audio-desc">placeholder for media-equiv-audio-desc</p>
			<p id="media-equiv-real-time-captions">placeholder for media-equiv-real-time-captions</p>
			<p id="media-equiv-audio-desc-only">placeholder for media-equiv-audio-desc-only</p>
			<p id="media-equiv-sign">placeholder for media-equiv-sign</p>
			<p id="media-equiv-extended-ad">placeholder for media-equiv-extended-ad</p>
			<p id="media-equiv-text-doc">placeholder for media-equiv-text-doc</p>
			<p id="media-equiv-live-audio-only">placeholder for media-equiv-live-audio-only</p>
			<p id="content-structure-separation">placeholder for content-structure-separation</p>
			<p id="content-structure-separation-programmatic">placeholder for content-structure-separation-programmatic</p>
			<p id="content-structure-separation-sequence">placeholder for content-structure-separation-sequence</p>
			<p id="content-structure-separation-understanding">placeholder for content-structure-separation-understanding</p>
			<p id="visual-audio-contrast">placeholder for visual-audio-contrast</p>
			<p id="visual-audio-contrast-without-color">placeholder for visual-audio-contrast-without-color</p>
			<p id="visual-audio-contrast-dis-audio">placeholder for visual-audio-contrast-dis-audio</p>
			<p id="visual-audio-contrast-contrast">placeholder for visual-audio-contrast-contrast</p>
			<p id="visual-audio-contrast-scale">placeholder for visual-audio-contrast-scale</p>
			<p id="visual-audio-contrast-text-presentation">placeholder for visual-audio-contrast-text-presentation</p>
			<p id="visual-audio-contrast7">placeholder for visual-audio-contrast7</p>
			<p id="visual-audio-contrast-noaudio">placeholder for visual-audio-contrast-noaudio</p>
			<p id="visual-audio-contrast-visual-presentation">placeholder for visual-audio-contrast-visual-presentation</p>
			<p id="visual-audio-contrast-text-images">placeholder for visual-audio-contrast-text-images</p>
			<p id="keyboard-operation">placeholder for keyboard-operation</p>
			<p id="keyboard-operation-keyboard-operable">placeholder for keyboard-operation-keyboard-operable</p>
			<p id="keyboard-operation-trapping">placeholder for keyboard-operation-trapping</p>
			<p id="keyboard-operation-all-funcs">placeholder for keyboard-operation-all-funcs</p>
			<p id="time-limits">placeholder for time-limits</p>
			<p id="time-limits-required-behaviors">placeholder for time-limits-required-behaviors</p>
			<p id="time-limits-pause">placeholder for time-limits-pause</p>
			<p id="time-limits-no-exceptions">placeholder for time-limits-no-exceptions</p>
			<p id="time-limits-postponed">placeholder for time-limits-postponed</p>
			<p id="time-limits-server-timeout">placeholder for time-limits-server-timeout</p>
			<p id="seizure">placeholder for seizure</p>
			<p id="seizure-does-not-violate">placeholder for seizure-does-not-violate</p>
			<p id="seizure-three-times">placeholder for seizure-three-times</p>
			<p id="navigation-mechanisms">placeholder for navigation-mechanisms</p>
			<p id="navigation-mechanisms-skip">placeholder for navigation-mechanisms-skip</p>
			<p id="navigation-mechanisms-title">placeholder for navigation-mechanisms-title</p>
			<p id="navigation-mechanisms-focus-order">placeholder for navigation-mechanisms-focus-order</p>
			<p id="navigation-mechanisms-refs">placeholder for navigation-mechanisms-refs</p>
			<p id="navigation-mechanisms-mult-loc">placeholder for navigation-mechanisms-mult-loc</p>
			<p id="navigation-mechanisms-descriptive">placeholder for navigation-mechanisms-descriptive</p>
			<p id="navigation-mechanisms-focus-visible">placeholder for navigation-mechanisms-focus-visible</p>
			<p id="navigation-mechanisms-location">placeholder for navigation-mechanisms-location</p>
			<p id="navigation-mechanisms-link">placeholder for navigation-mechanisms-link</p>
			<p id="navigation-mechanisms-headings">placeholder for navigation-mechanisms-headings</p>
			<p id="meaning">placeholder for meaning</p>
			<p id="meaning-doc-lang-id">placeholder for meaning-doc-lang-id</p>
			<p id="meaning-other-lang-id">placeholder for meaning-other-lang-id</p>
			<p id="meaning-idioms">placeholder for meaning-idioms</p>
			<p id="meaning-located">placeholder for meaning-located</p>
			<p id="meaning-supplements">placeholder for meaning-supplements</p>
			<p id="meaning-pronunciation">placeholder for meaning-pronunciation</p>
			<p id="consistent-behavior">placeholder for consistent-behavior</p>
			<p id="consistent-behavior-receive-focus">placeholder for consistent-behavior-receive-focus</p>
			<p id="consistent-behavior-unpredictable-change">placeholder for consistent-behavior-unpredictable-change</p>
			<p id="consistent-behavior-consistent-locations">placeholder for consistent-behavior-consistent-locations</p>
			<p id="consistent-behavior-consistent-functionality">placeholder for consistent-behavior-consistent-functionality</p>
			<p id="consistent-behavior-no-extreme-changes-context">placeholder for consistent-behavior-no-extreme-changes-context</p>
			<p id="minimize-error">placeholder for minimize-error</p>
			<p id="minimize-error-identified">placeholder for minimize-error-identified</p>
			<p id="minimize-error-cues">placeholder for minimize-error-cues</p>
			<p id="minimize-error-suggestions">placeholder for minimize-error-suggestions</p>
			<p id="minimize-error-reversible">placeholder for minimize-error-reversible</p>
			<p id="minimize-error-context-help">placeholder for minimize-error-context-help</p>
			<p id="minimize-error-reversible-all">placeholder for minimize-error-reversible-all</p>
			<p id="ensure-compat">placeholder for ensure-compat</p>
			<p id="ensure-compat-parses">placeholder for ensure-compat-parses</p>
			<p id="ensure-compat-rsv">placeholder for ensure-compat-rsv</p>
			<p id="G1">placeholder for G1</p>
			<p id="G4">placeholder for G4</p>
			<p id="G5">placeholder for G5</p>
			<p id="G8">placeholder for G8</p>
			<p id="G9">placeholder for G9</p>
			<p id="G10">placeholder for G10</p>
			<p id="G11">placeholder for G11</p>
			<p id="G13">placeholder for G13</p>
			<p id="G14">placeholder for G14</p>
			<p id="G15">placeholder for G15</p>
			<p id="G17">placeholder for G17</p>
			<p id="G18">placeholder for G18</p>
			<p id="G19">placeholder for G19</p>
			<p id="G21">placeholder for G21</p>
			<p id="G53">placeholder for G53</p>
			<p id="G54">placeholder for G54</p>
			<p id="G55">placeholder for G55</p>
			<p id="G56">placeholder for G56</p>
			<p id="G57">placeholder for G57</p>
			<p id="G58">placeholder for G58</p>
			<p id="G59">placeholder for G59</p>
			<p id="G60">placeholder for G60</p>
			<p id="G61">placeholder for G61</p>
			<p id="G62">placeholder for G62</p>
			<p id="G63">placeholder for G63</p>
			<p id="G64">placeholder for G64</p>
			<p id="G65">placeholder for G65</p>
			<p id="G68">placeholder for G68</p>
			<p id="G69">placeholder for G69</p>
			<p id="G70">placeholder for G70</p>
			<p id="G71">placeholder for G71</p>
			<p id="G73">placeholder for G73</p>
			<p id="G74">placeholder for G74</p>
			<p id="G75">placeholder for G75</p>
			<p id="G76">placeholder for G76</p>
			<p id="G78">placeholder for G78</p>
			<p id="G79">placeholder for G79</p>
			<p id="G80">placeholder for G80</p>
			<p id="G81">placeholder for G81</p>
			<p id="G82">placeholder for G82</p>
			<p id="G83">placeholder for G83</p>
			<p id="G84">placeholder for G84</p>
			<p id="G85">placeholder for G85</p>
			<p id="G86">placeholder for G86</p>
			<p id="G87">placeholder for G87</p>
			<p id="G88">placeholder for G88</p>
			<p id="G89">placeholder for G89</p>
			<p id="G90">placeholder for G90</p>
			<p id="G91">placeholder for G91</p>
			<p id="G92">placeholder for G92</p>
			<p id="G93">placeholder for G93</p>
			<p id="G94">placeholder for G94</p>
			<p id="G95">placeholder for G95</p>
			<p id="G96">placeholder for G96</p>
			<p id="G97">placeholder for G97</p>
			<p id="G98">placeholder for G98</p>
			<p id="G99">placeholder for G99</p>
			<p id="G100">placeholder for G100</p>
			<p id="G101">placeholder for G101</p>
			<p id="G102">placeholder for G102</p>
			<p id="G103">placeholder for G103</p>
			<p id="G105">placeholder for G105</p>
			<p id="G107">placeholder for G107</p>
			<p id="G108">placeholder for G108</p>
			<p id="G110">placeholder for G110</p>
			<p id="G111">placeholder for G111</p>
			<p id="G112">placeholder for G112</p>
			<p id="G115">placeholder for G115</p>
			<p id="G117">placeholder for G117</p>
			<p id="G120">placeholder for G120</p>
			<p id="G121">placeholder for G121</p>
			<p id="G122">placeholder for G122</p>
			<p id="G123">placeholder for G123</p>
			<p id="G124">placeholder for G124</p>
			<p id="G125">placeholder for G125</p>
			<p id="G126">placeholder for G126</p>
			<p id="G127">placeholder for G127</p>
			<p id="G128">placeholder for G128</p>
			<p id="G130">placeholder for G130</p>
			<p id="G131">placeholder for G131</p>
			<p id="G133">placeholder for G133</p>
			<p id="G134">placeholder for G134</p>
			<p id="G135">placeholder for G135</p>
			<p id="G136">placeholder for G136</p>
			<p id="G138">placeholder for G138</p>
			<p id="G139">placeholder for G139</p>
			<p id="G140">placeholder for G140</p>
			<p id="G141">placeholder for G141</p>
			<p id="G142">placeholder for G142</p>
			<p id="G143">placeholder for G143</p>
			<p id="G144">placeholder for G144</p>
			<p id="G145">placeholder for G145</p>
			<p id="G146">placeholder for G146</p>
			<p id="G147">placeholder for G147</p>
			<p id="G148">placeholder for G148</p>
			<p id="G149">placeholder for G149</p>
			<p id="G150">placeholder for G150</p>
			<p id="G151">placeholder for G151</p>
			<p id="G152">placeholder for G152</p>
			<p id="G153">placeholder for G153</p>
			<p id="G154">placeholder for G154</p>
			<p id="G155">placeholder for G155</p>
			<p id="G156">placeholder for G156</p>
			<p id="G157">placeholder for G157</p>
			<p id="H2">placeholder for H2</p>
			<p id="H4">placeholder for H4</p>
			<p id="H24">placeholder for H24</p>
			<p id="H25">placeholder for H25</p>
			<p id="H27">placeholder for H27</p>
			<p id="H28">placeholder for H28</p>
			<p id="H30">placeholder for H30</p>
			<p id="H32">placeholder for H32</p>
			<p id="H33">placeholder for H33</p>
			<p id="H34">placeholder for H34</p>
			<p id="H35">placeholder for H35</p>
			<p id="H36">placeholder for H36</p>
			<p id="H37">placeholder for H37</p>
			<p id="H39">placeholder for H39</p>
			<p id="H40">placeholder for H40</p>
			<p id="H42">placeholder for H42</p>
			<p id="H43">placeholder for H43</p>
			<p id="H44">placeholder for H44</p>
			<p id="H45">placeholder for H45</p>
			<p id="H46">placeholder for H46</p>
			<p id="H48">placeholder for H48</p>
			<p id="H49">placeholder for H49</p>
			<p id="H50">placeholder for H50</p>
			<p id="H51">placeholder for H51</p>
			<p id="H53">placeholder for H53</p>
			<p id="H54">placeholder for H54</p>
			<p id="H56">placeholder for H56</p>
			<p id="H57">placeholder for H57</p>
			<p id="H58">placeholder for H58</p>
			<p id="H59">placeholder for H59</p>
			<p id="H60">placeholder for H60</p>
			<p id="H62">placeholder for H62</p>
			<p id="H63">placeholder for H63</p>
			<p id="H64">placeholder for H64</p>
			<p id="H65">placeholder for H65</p>
			<p id="H67">placeholder for H67</p>
			<p id="H69">placeholder for H69</p>
			<p id="H70">placeholder for H70</p>
			<p id="H71">placeholder for H71</p>
			<p id="H73">placeholder for H73</p>
			<p id="H74">placeholder for H74</p>
			<p id="H75">placeholder for H75</p>
			<p id="H76">placeholder for H76</p>
			<p id="H77">placeholder for H77</p>
			<p id="H78">placeholder for H78</p>
			<p id="H79">placeholder for H79</p>
			<p id="H80">placeholder for H80</p>
			<p id="H81">placeholder for H81</p>
			<p id="H82">placeholder for H82</p>
			<p id="H83">placeholder for H83</p>
			<p id="H84">placeholder for H84</p>
			<p id="H85">placeholder for H85</p>
			<p id="C6">placeholder for C6</p>
			<p id="C7">placeholder for C7</p>
			<p id="C8">placeholder for C8</p>
			<p id="C9">placeholder for C9</p>
			<p id="C12">placeholder for C12</p>
			<p id="C13">placeholder for C13</p>
			<p id="C14">placeholder for C14</p>
			<p id="C15">placeholder for C15</p>
			<p id="C16">placeholder for C16</p>
			<p id="C17">placeholder for C17</p>
			<p id="C18">placeholder for C18</p>
			<p id="C19">placeholder for C19</p>
			<p id="C20">placeholder for C20</p>
			<p id="C21">placeholder for C21</p>
			<p id="SCR1">placeholder for SCR1</p>
			<p id="SCR14">placeholder for SCR14</p>
			<p id="SCR16">placeholder for SCR16</p>
			<p id="SCR18">placeholder for SCR18</p>
			<p id="SCR19">placeholder for SCR19</p>
			<p id="SCR20">placeholder for SCR20</p>
			<p id="SCR21">placeholder for SCR21</p>
			<p id="SCR22">placeholder for SCR22</p>
			<p id="SCR24">placeholder for SCR24</p>
			<p id="SCR26">placeholder for SCR26</p>
			<p id="SCR27">placeholder for SCR27</p>
			<p id="SVR1">placeholder for SVR1</p>
			<p id="SVR2">placeholder for SVR2</p>
			<p id="SVR3">placeholder for SVR3</p>
			<p id="SM1">placeholder for SM1</p>
			<p id="SM2">placeholder for SM2</p>
			<p id="SM6">placeholder for SM6</p>
			<p id="SM7">placeholder for SM7</p>
			<p id="SM11">placeholder for SM11</p>
			<p id="SM12">placeholder for SM12</p>
			<p id="SM13">placeholder for SM13</p>
			<p id="SM14">placeholder for SM14</p>
			<p id="T1">placeholder for T1</p>
			<p id="T2">placeholder for T2</p>
			<p id="T3">placeholder for T3</p>
			<p id="F1">placeholder for F1</p>
			<p id="F2">placeholder for F2</p>
			<p id="F3">placeholder for F3</p>
			<p id="F4">placeholder for F4</p>
			<p id="F7">placeholder for F7</p>
			<p id="F8">placeholder for F8</p>
			<p id="F9">placeholder for F9</p>
			<p id="F10">placeholder for F10</p>
			<p id="F12">placeholder for F12</p>
			<p id="F13">placeholder for F13</p>
			<p id="F14">placeholder for F14</p>
			<p id="F15">placeholder for F15</p>
			<p id="F16">placeholder for F16</p>
			<p id="F17">placeholder for F17</p>
			<p id="F19">placeholder for F19</p>
			<p id="F20">placeholder for F20</p>
			<p id="F22">placeholder for F22</p>
			<p id="F23">placeholder for F23</p>
			<p id="F24">placeholder for F24</p>
			<p id="F25">placeholder for F25</p>
			<p id="F26">placeholder for F26</p>
			<p id="F30">placeholder for F30</p>
			<p id="F31">placeholder for F31</p>
			<p id="F32">placeholder for F32</p>
			<p id="F33">placeholder for F33</p>
			<p id="F34">placeholder for F34</p>
			<p id="F36">placeholder for F36</p>
			<p id="F37">placeholder for F37</p>
			<p id="F38">placeholder for F38</p>
			<p id="F39">placeholder for F39</p>
			<p id="F40">placeholder for F40</p>
			<p id="F41">placeholder for F41</p>
			<p id="F42">placeholder for F42</p>
			<p id="F43">placeholder for F43</p>
			<p id="F44">placeholder for F44</p>
			<p id="F46">placeholder for F46</p>
			<p id="F47">placeholder for F47</p>
			<p id="F48">placeholder for F48</p>
			<p id="F49">placeholder for F49</p>
			<p id="F50">placeholder for F50</p>
			<p id="F52">placeholder for F52</p>
			<p id="F54">placeholder for F54</p>
			<p id="F55">placeholder for F55</p>
			<p id="F58">placeholder for F58</p>
			<p id="F59">placeholder for F59</p>
			<p id="F60">placeholder for F60</p>
			<p id="F61">placeholder for F61</p>
			<p id="F62">placeholder for F62</p>
			<p id="F63">placeholder for F63</p>
			<p id="F65">placeholder for F65</p>
			<p id="F66">placeholder for F66</p>
			<p id="F67">placeholder for F67</p>
			<p id="F68">placeholder for F68</p>
			<p id="F69">placeholder for F69</p>
			<p id="F70">placeholder for F70</p>
			<p id="F71">placeholder for F71</p>
			<p id="F72">placeholder for F72</p>
			<p id="F73">placeholder for F73</p>
			<p id="F74">placeholder for F74</p>
			<p id="F75">placeholder for F75</p>
			<p id="F76">placeholder for F76</p>
			<p id="F77">placeholder for F77</p>
			<p id="F78">placeholder for F78</p>
			<p id="F79">placeholder for F79</p>
			<p id="F80">placeholder for F80</p>
			<p id="F81">placeholder for F81</p>
			<p id="F82">placeholder for F82</p>
			<p id="F83">placeholder for F83</p>
			<p id="F84">placeholder for F84</p>
			<p id="F85">placeholder for F85</p>
			<p id="F86">placeholder for F86</p>
		</div1>
	</back>
</spec>
